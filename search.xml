<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>centOS7 安装nginx</title>
      <link href="/2021/07/19/centOS7%20%E5%AE%89%E8%A3%85nginx/"/>
      <url>/2021/07/19/centOS7%20%E5%AE%89%E8%A3%85nginx/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在家呆的时间很长，没有linux 服务器，所以就在腾讯云上买了一个云服务器折腾一下，重置秘密重装系统和用远程连接什么的就不讲了，都比较简单，在控制台上都可以操作。我安装后，想搭建一个nginx试试。</p><p>自己也是采坑一路，虽然以前也在Ubuntu上安装nginx 的，但是还是和centOS 上有些不一样的。</p><p>如果是在腾讯云上买的服务器，其实可以一步到位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx</span><br></pre></td></tr></table></figure><p>但是我是下载的nginx 安装包，上传到服务器，安装的。</p><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;</span><br></pre></td></tr></table></figure><p>想要各个什么版本，自己选，我这里选的是1.16.2<br><img src="https://img-blog.csdnimg.cn/2020022313252156.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70"></p><h1 id="上传-amp-解压"><a href="#上传-amp-解压" class="headerlink" title="上传&amp;解压"></a>上传&amp;解压</h1><p>因为服务器上什么都没有，要上传安装包的，需要先安装lrzsz.我这里有rz 明了上传的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install lrzsz</span><br></pre></td></tr></table></figure><p>安装好之后，就将安装包解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.6.2.tar.gz</span><br></pre></td></tr></table></figure><p>解压后如下<br><img src="https://img-blog.csdnimg.cn/20200223133024492.png"></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>刚开始我直接运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd nginx-1.6.2</span><br><span class="line">.&#x2F;configure </span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>会报错，就是安装不成功，提示没有什么包，最后想到 nginx 是c语言编写的，需要编译的话，可能是没有c语言环境，所以需要安装环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc gcc-c++</span><br></pre></td></tr></table></figure><p>最后才安装成功。</p><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><p>安装成功后，怎么启动呢，安装到什么位置了呢？<br>默认安装到了这个目录下，我们可以来到这个目录下找到他们。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;nginx</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200223133625951.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70"><br>可以看到主要就 conf 、logs、sbin 这三个目录啦。conf中的nginx.conf 就是我们主要配置的配置文件，这个我们稍候说，logs 就是nginx 的日志，对我们查看接口请求情况很有帮助。sbin 就是nginx 的命令目录，可以看到就一个nginx 的命令。<br><img src="https://img-blog.csdnimg.cn/20200223133844262.png"></p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>那我们怎么启动nginx 呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx</span><br></pre></td></tr></table></figure><h2 id="检查配置文件是否正确"><a href="#检查配置文件是否正确" class="headerlink" title="检查配置文件是否正确"></a>检查配置文件是否正确</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd  &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;</span><br><span class="line">.&#x2F;nginx -t</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200223134102319.png"><br>如上表示成功。</p><h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;nginx -s reload</span><br></pre></td></tr></table></figure><h2 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;nginx -s stop</span><br></pre></td></tr></table></figure><p>当然我们可以通过查看进程号，来杀死进程。<br>查看nginx 的进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep nginx</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020022313433980.png"></p><h1 id="权限问题"><a href="#权限问题" class="headerlink" title="权限问题"></a>权限问题</h1><p>在nginx 已经搭建好之后，我网上找了一个静态html 文件试了一下，结果配置好路劲后发现，一直访问不了，界面上报403f.。看了一下nginx 日志发现如下错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;root&#x2F;love5&#x2F;index.html&quot; failed (13: Permission denied), client: xx.xx.xx.xx, server: localhost, request: &quot;GET &#x2F;index&#x2F;index.html HTTP&#x2F;1.1&quot;, host: &quot;xx.xx.xx.xx:8080&quot;</span><br></pre></td></tr></table></figure><p>造成这个原因是因为我们运行nginx 的时候权限不是root 权限，所以需要在nginx.conf 做如下修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user  root;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200223135555930.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70"><br>最后总算是通啦，在本地浏览器上成功的显示了静态文件。<br><img src="https://img-blog.csdnimg.cn/20200223135707313.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70"><br>网上找的资源么，但是女朋友不知道，把做好的这个给女朋友看，女朋友以为是我自己做的送给她的，着实开心了一下哈哈。</p><h1 id="番外"><a href="#番外" class="headerlink" title="番外"></a>番外</h1><p>安装nginx 不是终极目的，还是想把项目放到服务器上跑的，由于自己学的都是Java，所以就在服务器上安装jdk ，但是自带的都是openjdk ，而我们本地的用的都是Oracle jdk.所以想安装oracle jdk 。但是官网上不知道怎么回事，一直下载不下。<br>官网：<a href="https://www.oracle.com/java/technologies/javase-jdk8-downloads.html" target="_blank" rel="noopener">https://www.oracle.com/java/technologies/javase-jdk8-downloads.html</a><br><img src="https://img-blog.csdnimg.cn/20200223140418865.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70"><br>提示我需要勾选许可，但是没有地方勾选，把我气得不轻，没办法我就安装的open jdk。然后在本地打包一个测试spring boot jar 包，看在服务器上能否运行。发现是可以运行的。看来在服务器上安装open jdk 也是可以的。</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《剑指offer》之斐波那契数列系列</title>
      <link href="/2021/07/09/%E3%80%8A%E5%89%91%E6%8C%87offer%E3%80%8B%E4%B9%8B%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E7%B3%BB%E5%88%97/"/>
      <url>/2021/07/09/%E3%80%8A%E5%89%91%E6%8C%87offer%E3%80%8B%E4%B9%8B%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E7%B3%BB%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>斐波那契数列 算是比较常见的算法题了。<br>f(1)=1;<br>f(2)=1;<br>f(3)=2;<br>…</p><a id="more"></a><p>f(n)=f(n-1)+f(n-2);<br>一般采用递归的思想。今天做了几个关于斐波那契数列，都记录下来。</p><h1 id="题目一"><a href="#题目一" class="headerlink" title="题目一"></a>题目一</h1><p>大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）。<br>n&lt;=39</p><p>这个是最原始的，就是上面我说的斐波那契数列。代码实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public int Fibonacci(int n) &#123;</span><br><span class="line">        if(n&lt;0)&#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;else if(n&#x3D;&#x3D;1 || n&#x3D;&#x3D;2)&#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;</span><br><span class="line">        return Fibonacci(n-1)+Fibonacci(n-2);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到非常简单，但是递归算法虽然方便，但是耗时比较长，我们也可以用循环实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public int Fibonacci(int n) &#123;</span><br><span class="line"></span><br><span class="line">        if(n&lt;0)&#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;else if(n&#x3D;&#x3D;1 || n&#x3D;&#x3D;2)&#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;</span><br><span class="line">        int a&#x3D;1;</span><br><span class="line">        int b&#x3D;1;</span><br><span class="line">        int c&#x3D;0;</span><br><span class="line">        for(int i&#x3D;3;i&lt;&#x3D;n;i++)&#123;</span><br><span class="line">            c&#x3D;a+b;</span><br><span class="line">            a&#x3D;b;</span><br><span class="line">            b&#x3D;c;</span><br><span class="line">        &#125;</span><br><span class="line">        return c;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>用循环实现的话，减少了时间损耗，增加了空间成本。所以具体情况具体分析还得。</p><h1 id="题目二"><a href="#题目二" class="headerlink" title="题目二"></a>题目二</h1><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。</p><p>这是一道斐波那契数列，我们读题可以发现。<br>只有一个台阶，一种跳法。<br>f(1)=1;<br>只要两个台阶，两种跳法。<br>f(2)=2；</p><p>只要三个台阶，从第一个台阶跳2步上来，或者从第二个台阶跳一步上来。<br>f(3)=f(1)+f(2)</p><p>n 个台阶，从n-1台阶跳一步上来，或者从n-2 台阶跳2步上来。<br>f(n)=f(n-1)+f(n-2);<br>所以这就是一道典型的斐波那契数列。代码和上面一样。</p><h1 id="题目三"><a href="#题目三" class="headerlink" title="题目三"></a>题目三</h1><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p><p>在上面的基础上，可以跳n个台阶。<br>f(n)=f(n-1)+f(n-2)+f(n-3)+……+f(3)+f(2)+f(1);<br>f(n-1)=f(n-2)+f(n-3)+……+f(3)+f(2)+f(1);</p><p>所以上试减下试。<br>f(n)-f(n-1)=f(n-1)+f(n-2)+f(n-3)+……+f(3)+f(2)+f(1)-[f(n-2)+f(n-3)+……+f(3)+f(2)+f(1)];<br> 所以：<br> f(n)-f(n-1)=f(n-1)；<br> f(n)=2f(n-1);n&gt;1<br>所以代码为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public int JumpFloorII(int target) &#123;</span><br><span class="line">        if(target&lt;1) return 0;</span><br><span class="line">    else if (target&#x3D;&#x3D;1) return 1;</span><br><span class="line">        else return 2*JumpFloorII(target-1);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="题目四"><a href="#题目四" class="headerlink" title="题目四"></a>题目四</h1><p>我们可以用2<em>1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2</em>1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？</p><p>这道题目相对前面几道，比较难理解是斐波那契数列。<br>我们来分析一下。<br>当n=1 时，只有一种情况。<br>f(1)=1;<br>当n=2时，2个2<em>1的小矩形，拼成2</em>2的大矩形。有2种方法。<br>f(2)=2;<br>当n=3时，3个2<em>1的小矩形，拼成2</em>3的大矩形。<br>这个时候我们就要想下，2<em>3的矩形是一个2</em>1 和一个2<em>2的矩形组成的。<br>当n=5时，5个2</em>1的小矩形，拼成2<em>5的大矩形。<br>这个时候我们就要想下，2</em>5的矩形是一个2<em>4的矩形加一个2</em>1的矩形组成，或者一个2<em>3的矩形加一个2</em>2 的矩形组成。</p><p>所以可以推测出还是一个斐波那契数列。<br>f(n)=f(n-1)+f(n-2);</p><p>代码和最开始一样，就不重复啦。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 《剑指offer》 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《剑指offer》之反转链表</title>
      <link href="/2021/07/09/%E3%80%8A%E5%89%91%E6%8C%87offer%E3%80%8B%E4%B9%8B%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
      <url>/2021/07/09/%E3%80%8A%E5%89%91%E6%8C%87offer%E3%80%8B%E4%B9%8B%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天又刷了一道关于链表的，本来打算接着前面一篇关于链表的写，但是想想还是再起一篇。</p><a id="more"></a><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>输入一个链表，反转链表后，输出新链表的表头。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>最开始我以为输出表头的值，直接找到链表结尾的元素输出就好了，后来发现是输出表头。这就要从新思考了。需要反转链表，比如我们现在的链表为1-&gt;3-&gt;5-&gt;8 我们要反转成8-&gt;5-&gt;3-&gt;1</p><p>也就是说之前1的下一个节点是3，要锋、改成下一个节点是null<br>3的下一个节点是5，改成下一个节点是1.</p><p>这里我们遍历链表，listNode.next的节点先保存起来，然后将listNode.next的指向改成pre.</p><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public ListNode ReverseList(ListNode head) &#123;</span><br><span class="line">        if(head&#x3D;&#x3D;null)&#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode listNode&#x3D;head;</span><br><span class="line">        ListNode pre&#x3D;null;</span><br><span class="line">        while(listNode!&#x3D;null)&#123;</span><br><span class="line">            ListNode next&#x3D;listNode.next;</span><br><span class="line">            listNode.next&#x3D;pre;</span><br><span class="line"></span><br><span class="line">            pre&#x3D;listNode;</span><br><span class="line">            listNode&#x3D;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return pre;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到代码很简短，就是遍历listNode。将listNode.next 先保存到next 中，因为接着遍历会用到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ListNode next&#x3D;listNode.next;</span><br></pre></td></tr></table></figure><p>然后listNode.next。<br>然后将当前节点保存到pre 中，用于下个节点的前节点。<br>最后将 next赋给listNode，用于执行下个节点。</p><h1 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public ListNode ReverseList(ListNode head) &#123;</span><br><span class="line">        if(head&#x3D;&#x3D;null)&#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode listNode&#x3D;head;</span><br><span class="line">        ListNode pre&#x3D;null;</span><br><span class="line">        while(listNode!&#x3D;null)&#123;</span><br><span class="line">            ListNode next&#x3D;listNode.next;</span><br><span class="line">            listNode.next&#x3D;pre;</span><br><span class="line"></span><br><span class="line">            pre&#x3D;listNode;</span><br><span class="line">            listNode&#x3D;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return pre;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ListNode listNode&#x3D;new ListNode(1);</span><br><span class="line">        listNode.next&#x3D;new ListNode(3);</span><br><span class="line">        listNode.next.next&#x3D;new ListNode(5);</span><br><span class="line">        listNode.next.next.next&#x3D;new ListNode(8);</span><br><span class="line"></span><br><span class="line">        Solution solution&#x3D;new Solution();</span><br><span class="line">        ListNode dd&#x3D;solution.ReverseList(listNode);</span><br><span class="line">        System.out.println(dd.val);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p><img src="https://img-blog.csdnimg.cn/20200203183118507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9xdWVsbGFuYW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200203183204606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9xdWVsbGFuYW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="合并两个排序的链表"><a href="#合并两个排序的链表" class="headerlink" title="合并两个排序的链表"></a>合并两个排序的链表</h1><p>输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。</p><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><p>把两个有序的链表整合成一个有序的列表。<br>思路其实也很简单。比如我们两个链表为：<br>list1:1-&gt;3-&gt;5-&gt;8<br>list2: 2-&gt;4-&gt;6-&gt;7<br>先比较1和2<br>1小于2，则list1.next<br>在比较3和2<br>3大于2，则list2.next<br>直到整个链表都是有序的。</p><h1 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h1><p>使用递归，我们返回的是是一个有序的链表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public ListNode Merge(ListNode list1, ListNode list2) &#123;</span><br><span class="line"></span><br><span class="line">        if(list1&#x3D;&#x3D;null)&#123;</span><br><span class="line">            return list2;</span><br><span class="line">        &#125;else if(list2&#x3D;&#x3D;null)&#123;</span><br><span class="line">            return list1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(list1.val&lt;list2.val)&#123;</span><br><span class="line">            list1.next&#x3D;Merge(list1.next,list2);</span><br><span class="line">            return list1;</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            list2.next&#x3D;Merge(list1,list2.next);</span><br><span class="line">            return list2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h1><p>使用循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public ListNode Merge2(ListNode list1, ListNode list2) &#123;</span><br><span class="line"></span><br><span class="line">        if(list1&#x3D;&#x3D;null)&#123;</span><br><span class="line">            return list2;</span><br><span class="line">        &#125;else if(list2&#x3D;&#x3D;null)&#123;</span><br><span class="line">            return list1;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode head&#x3D;new ListNode(-1);</span><br><span class="line">        ListNode root&#x3D;head;</span><br><span class="line">        while(list1!&#x3D;null&amp;&amp;list2!&#x3D;null)&#123;</span><br><span class="line">            if(list1.val&lt;list2.val)&#123;</span><br><span class="line">                head.next&#x3D;list1;</span><br><span class="line">                head&#x3D;list1;</span><br><span class="line">                list1&#x3D;list1.next;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                head.next&#x3D;list2;</span><br><span class="line">                head&#x3D;list2;</span><br><span class="line">                list2&#x3D;list2.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(list1!&#x3D;null)&#123;</span><br><span class="line">            head.next&#x3D;list1;</span><br><span class="line">        &#125;</span><br><span class="line">        if(list2!&#x3D;null)&#123;</span><br><span class="line">            head.next&#x3D;list2;</span><br><span class="line">        &#125;</span><br><span class="line">        return root.next;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="主方法"><a href="#主方法" class="headerlink" title="主方法"></a>主方法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        ListNode list1&#x3D;new ListNode(1);</span><br><span class="line">        list1.next&#x3D;new ListNode(3);</span><br><span class="line">        list1.next.next&#x3D;new ListNode(5);</span><br><span class="line">        list1.next.next.next&#x3D;new ListNode(8);</span><br><span class="line"></span><br><span class="line">        ListNode list2&#x3D;new ListNode(2);</span><br><span class="line">        list2.next&#x3D;new ListNode(4);</span><br><span class="line">        list2.next.next&#x3D;new ListNode(6);</span><br><span class="line">        list2.next.next.next&#x3D;new ListNode(7);</span><br><span class="line"></span><br><span class="line">        Solution solution&#x3D;new Solution();</span><br><span class="line">        ListNode dd&#x3D;solution.Merge2(list1,list2);</span><br><span class="line">        System.out.println(dd.val);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 《剑指offer》 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《剑指offer》之二叉树的深度</title>
      <link href="/2021/07/09/%E3%80%8A%E5%89%91%E6%8C%87offer%E3%80%8B%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6/"/>
      <url>/2021/07/09/%E3%80%8A%E5%89%91%E6%8C%87offer%E3%80%8B%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们今天接着来看一道关于二叉树的算法题，关于二叉树的深度。</p><a id="more"></a><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>求该树的深度，主要就是看最长路径。比如下图的深度为5，最长的路径为34，99，35，64，77<br><img src="https://img-blog.csdnimg.cn/20200210190247954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>那应该怎么做了？这里用递归，如果当前节点没有左右节点，就返回当前节点，如果有左右节点，就返回左右节点的，比较左节点和右节点的深度，谁的深度大就返回那个。这样就可以获得树的最大深度啦。</p><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public int TreeDepth(TreeNode root) &#123;</span><br><span class="line">        if(root&#x3D;&#x3D;null)&#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int left&#x3D;TreeDepth(root.left);</span><br><span class="line">        int right&#x3D;TreeDepth(root.right);</span><br><span class="line">        if(left&gt;right)&#123;</span><br><span class="line">            return left+1;</span><br><span class="line">        &#125;</span><br><span class="line">        return right+1;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>上面主要注意的是left+1 和right+1;为什么要加一呢，因为我们递归的出口是当前节点为null ,返回0，为1个节点的话返回1.</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>测试main方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        TreeNode root &#x3D;new TreeNode(34);</span><br><span class="line">        root.left&#x3D;new TreeNode(23);</span><br><span class="line">        root.right&#x3D;new TreeNode(99);</span><br><span class="line">        root.left.left&#x3D;new TreeNode(1);</span><br><span class="line">        root.left.right&#x3D;new TreeNode(27);</span><br><span class="line">        root.right.left&#x3D;new TreeNode(35);</span><br><span class="line">        root.right.left.right&#x3D;new TreeNode(64);</span><br><span class="line">        root.right.left.right.right&#x3D;new TreeNode(77);</span><br><span class="line">        TreeOperation.show(root);</span><br><span class="line">        Solution solution&#x3D; new Solution();</span><br><span class="line">        System.out.println(solution.TreeDepth(root));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200210192011852.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200210192140598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 《剑指offer》 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>调第三方厂家接口实现文件文件上传httpclient</title>
      <link href="/2021/07/09/%E8%B0%83%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8E%82%E5%AE%B6%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0httpclient/"/>
      <url>/2021/07/09/%E8%B0%83%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8E%82%E5%AE%B6%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0httpclient/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这种情况算是很少见的，前端上传文件到服务端，服务端接收文件，再调第三方接口，将文件存到第三方服务器。</p><p>从客户端接收文件的就不说了，比较常见，就记录下调第三方接口带参数。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>url为路径<br>jsonObject为常规的请求参数<br>token 为鉴权<br>file 为文件。大伙根据自己的需求进行修改。<br>核心代码为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">MultipartEntityBuilder reqEntity &#x3D; MultipartEntityBuilder.create();</span><br><span class="line">reqEntity.addBinaryBody(&quot;file&quot;, new FileInputStream(file), ContentType.DEFAULT_BINARY, file.getName());</span><br><span class="line">            Iterator iter &#x3D; jsonObject.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">            while (iter.hasNext()) &#123;</span><br><span class="line">                Map.Entry entry &#x3D; (Map.Entry) iter.next();</span><br><span class="line">                System.out.println(entry.getKey().toString());</span><br><span class="line">                System.out.println(entry.getValue().toString());</span><br><span class="line"></span><br><span class="line">                StringBody value &#x3D; new StringBody(entry.getValue().toString(), ContentType.create(&quot;text&#x2F;plain&quot;, Consts.UTF_8));</span><br><span class="line">                reqEntity.addPart(entry.getKey().toString(),value);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            HttpEntity httpEntity &#x3D; reqEntity.build();</span><br><span class="line">            HttpPost httppost &#x3D; new HttpPost(urlBuilder.toString());</span><br><span class="line">            httppost.setEntity(httpEntity);</span><br></pre></td></tr></table></figure><p>主要是使用MultipartEntityBuilder 将文件通过body 进行传输。<br>完整方法代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">public static String sendPost(String url, JSONObject jsonObject, String token,File file) &#123;</span><br><span class="line">        StringBuilder urlBuilder &#x3D; new StringBuilder(baseURLPath);</span><br><span class="line">        urlBuilder.append(url);</span><br><span class="line">        log.info(&quot;URL:&quot; + url);</span><br><span class="line">        log.info(&quot;Parm:&quot; + jsonObject);</span><br><span class="line">        FileBody fileBody&#x3D;new FileBody(file);</span><br><span class="line">        MultipartEntityBuilder reqEntity &#x3D; MultipartEntityBuilder.create();</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            reqEntity.addBinaryBody(&quot;file&quot;, new FileInputStream(file), ContentType.DEFAULT_BINARY, file.getName());</span><br><span class="line">            Iterator iter &#x3D; jsonObject.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">            while (iter.hasNext()) &#123;</span><br><span class="line">                Map.Entry entry &#x3D; (Map.Entry) iter.next();</span><br><span class="line">                System.out.println(entry.getKey().toString());</span><br><span class="line">                System.out.println(entry.getValue().toString());</span><br><span class="line"></span><br><span class="line">                StringBody value &#x3D; new StringBody(entry.getValue().toString(), ContentType.create(&quot;text&#x2F;plain&quot;, Consts.UTF_8));</span><br><span class="line">                reqEntity.addPart(entry.getKey().toString(),value);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            HttpEntity httpEntity &#x3D; reqEntity.build();</span><br><span class="line">            HttpPost httppost &#x3D; new HttpPost(urlBuilder.toString());</span><br><span class="line">            httppost.setEntity(httpEntity);</span><br><span class="line">            setHttpHeader(httppost, token);</span><br><span class="line"></span><br><span class="line">            RequestConfig config &#x3D; RequestConfig.custom()</span><br><span class="line">.setConnectTimeout(1000)</span><br><span class="line">.setConnectionRequestTimeout(1000)</span><br><span class="line">.setSocketTimeout(10 *1000)</span><br><span class="line">.build();</span><br><span class="line">            &#x2F;&#x2F;数据传输的超时时间</span><br><span class="line">            httppost.setConfig(config);</span><br><span class="line">            String result &#x3D; getPostResult(httppost);</span><br><span class="line">            log.info(result);</span><br><span class="line">            return result;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(e);</span><br><span class="line">            return &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">private static void setHttpHeader(HttpPost httppost, String token) &#123;</span><br><span class="line">httppost.setHeader(&quot;Authorization&quot;, &quot;Bearer &quot; + token);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 获取post请求返回结果</span><br><span class="line"> * </span><br><span class="line"> * @param httppost</span><br><span class="line"> * @return</span><br><span class="line"> *&#x2F;</span><br><span class="line">private static String getPostResult(HttpPost httppost) &#123;</span><br><span class="line">String result &#x3D; null;</span><br><span class="line">try (CloseableHttpResponse response &#x3D; httpclient.execute(httppost);) &#123;</span><br><span class="line">HttpEntity entity &#x3D; response.getEntity();</span><br><span class="line">result &#x3D; EntityUtils.toString(entity);</span><br><span class="line">if (result.contains(&quot;Invalid token&quot;)) &#123;</span><br><span class="line">result &#x3D; &quot;Token 过期，请重新登录&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">log.error(e.toString());</span><br><span class="line">result &#x3D; &quot;HTTP请求异常,请重试&quot;;</span><br><span class="line">&#125;</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用的是httpclient。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.httpcomponents&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;httpclient&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;4.5.3&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.httpcomponents&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;httpcore-nio&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;4.4.4&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.httpcomponents&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;httpcore&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;4.4.4&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.httpcomponents&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;httpclient-win&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;4.5.2&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.httpcomponents&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;httpclient-cache&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;4.5.2&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.httpcomponents&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;httpasyncclient&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;4.0-beta3&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> springBoot番外篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
            <tag> 上传文件 </tag>
            
            <tag> httpclient </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何优雅实现属性的动态注入</title>
      <link href="/2021/07/09/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%AE%9E%E7%8E%B0%E5%B1%9E%E6%80%A7%E7%9A%84%E5%8A%A8%E6%80%81%E6%B3%A8%E5%85%A5/"/>
      <url>/2021/07/09/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%AE%9E%E7%8E%B0%E5%B1%9E%E6%80%A7%E7%9A%84%E5%8A%A8%E6%80%81%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<p><img src="http://p1.pstatp.com/large/pgc-image/f56386d3bf4f44a5822683f39634e9b9" alt="file"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是在实际开发项目中遇到的一个问题。从数据库查询返回的 List&lt; Map&lt; String, Object&gt;&gt; 的集合。并且返回的列名是中文的，项目也没有使用mybatis 直接使用的jdbcTemplate. 并且字段还超级多，这样将数据转换的时候如果一个一个的注入就会让代码臭长臭长的，所以才有了动态注入。<br>我这里我整个思路都贴出来。</p><h1 id="实例类Entry"><a href="#实例类Entry" class="headerlink" title="实例类Entry"></a>实例类Entry</h1><p>我们先建一个entry类。用于对象存储。<br>我这里 创建一个BaseDateBean 的类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">@Setter</span><br><span class="line">@Getter</span><br><span class="line">public class BaseDateBean &#123;</span><br><span class="line"></span><br><span class="line">    private String  startTime;</span><br><span class="line">    private String  operator;</span><br><span class="line">    private String  code;</span><br><span class="line">    private String  testNumber;</span><br><span class="line">    private String  iphoneCardCode;</span><br><span class="line">    private String  sampleNumber;</span><br><span class="line">    private String  sampleTime;</span><br><span class="line">    private String  callNumber;</span><br><span class="line">    private String  callStatus;</span><br><span class="line">    private String  downInstantaneousSpeedCard;</span><br><span class="line">    private String  upInstantaneousSpeedCard;</span><br><span class="line">    private String  ssid;</span><br><span class="line">    private String  bssid;</span><br><span class="line">    private String  encryptType;</span><br><span class="line">    private String  intranetIp;</span><br><span class="line">    private String  externalIp;</span><br><span class="line">    private String  rssi;</span><br><span class="line">    private String  WIFIFrequency;</span><br><span class="line">    private String  WIFIChannel;</span><br><span class="line">    private String  baiduLongitude;</span><br><span class="line">    private String  baiduLatitude;</span><br><span class="line">    private String  originalLongitude;</span><br><span class="line">    private String  originalLatitude;</span><br><span class="line">    private String  positioningPrecision;</span><br><span class="line">    private String  positioningType;</span><br><span class="line">    private String  businessType;</span><br><span class="line">    private String  networkType;</span><br><span class="line">    private String  speedType;</span><br><span class="line">    private String  tac;</span><br><span class="line">    private String  eci;</span><br><span class="line">    private String  mnc;</span><br><span class="line">    private String  mcc;</span><br><span class="line">    private String  rsrq;</span><br><span class="line">    private String  earfcnDl;</span><br><span class="line">    private String  earfcnUl;</span><br><span class="line">    private String  frequencyDl;</span><br><span class="line">    private String  band;</span><br><span class="line">    private String  sinr;</span><br><span class="line">    private String  cdmaRxlev;</span><br><span class="line">    private String  evdoRxlev;</span><br><span class="line">    private String  earfcn;</span><br><span class="line">    private String  psc;</span><br><span class="line">    private String  uarfcn;</span><br><span class="line">    private String  rscp;</span><br><span class="line">    private String  rsrp;</span><br><span class="line">    private String  imsi;</span><br><span class="line">    private String  imei;</span><br><span class="line">    private String  lac;</span><br><span class="line">    private String  ci;</span><br><span class="line">    private String  signalStrength;</span><br><span class="line">    private String  snr;</span><br><span class="line">    private String  pci;</span><br><span class="line">    private String  nid;</span><br><span class="line">    private String  bid;</span><br><span class="line">    private String  sid;</span><br><span class="line">    private String  cdmaDbm;</span><br><span class="line">    private String  cdmaEcio;</span><br><span class="line">    private String  evdoDbm;</span><br><span class="line">    private String  evdoEcio;</span><br><span class="line">    private String  evdoSnr;</span><br><span class="line">    private String  arfcn;</span><br><span class="line">    private String  frequencyUl;</span><br><span class="line">    private String  bsic;</span><br><span class="line">    private String  rxlev;</span><br><span class="line">    private String  averageSpeed;</span><br><span class="line">    private String  updatedLongitude;</span><br><span class="line">    private String  updatedLatitude;</span><br><span class="line">    private String  averageUpstreamRate;</span><br><span class="line">    private String  averageDownstreamRate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到在实际项目中属性还是很多的，我这个还只是初版的，所以如果一个一个的set注入就很low了。</p><h1 id="创建map映射"><a href="#创建map映射" class="headerlink" title="创建map映射"></a>创建map映射</h1><p>在创建好实体类后，还得创建一个静态的map 集合，将数据库的列名和我们实体类的属性名做一个一一对应。这里创建的这个map 集合是我个人愚见。没有想到更好的办法就先这样处理的。<br>我们创建一个BaseDataMap类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">public  class BaseDataMap&#123;</span><br><span class="line">    private BaseDataMap()&#123;&#125;</span><br><span class="line">    public static final Map&lt;String,String&gt; cnEnMap&#x3D;new HashMap&lt;&gt;();</span><br><span class="line">    static&#123;</span><br><span class="line">        cnEnMap.put(&quot;测试开始时间&quot;,&quot;startTime&quot;);</span><br><span class="line">        cnEnMap.put(&quot;运营商&quot;,&quot;operator&quot;);</span><br><span class="line">        cnEnMap.put(&quot;编号&quot;,&quot;code&quot;);</span><br><span class="line">        cnEnMap.put(&quot;测试编号&quot;,&quot;testNumber&quot;);</span><br><span class="line">        cnEnMap.put(&quot;手机卡编号&quot;,&quot;iphoneCardCode&quot;);</span><br><span class="line">        cnEnMap.put(&quot;采样编号&quot;,&quot;sampleNumber&quot;);</span><br><span class="line">        cnEnMap.put(&quot;采样时间&quot;,&quot;sampleTime&quot;);</span><br><span class="line">        cnEnMap.put(&quot;呼叫编号&quot;,&quot;callNumber&quot;);</span><br><span class="line">        cnEnMap.put(&quot;呼叫状态&quot;,&quot;callStatus&quot;);</span><br><span class="line">        cnEnMap.put(&quot;下行瞬时速度&quot;,&quot;downInstantaneousSpeedCard&quot;);</span><br><span class="line">        cnEnMap.put(&quot;上行瞬时速度&quot;,&quot;upInstantaneousSpeedCard&quot;);</span><br><span class="line">        cnEnMap.put(&quot;SSID&quot;,&quot;ssid&quot;);</span><br><span class="line">        cnEnMap.put(&quot;BSSID&quot;,&quot;bssid&quot;);</span><br><span class="line">        cnEnMap.put(&quot;加密类型&quot;,&quot;encryptType&quot;);</span><br><span class="line">        cnEnMap.put(&quot;内网IP&quot;,&quot;intranetIp&quot;);</span><br><span class="line">        cnEnMap.put(&quot;外网IP&quot;,&quot;externalIp&quot;);</span><br><span class="line">        cnEnMap.put(&quot;RSSI&quot;,&quot;rssi&quot;);</span><br><span class="line">        cnEnMap.put(&quot;WIFI频率&quot;,&quot;WIFIFrequency&quot;);</span><br><span class="line">        cnEnMap.put(&quot;WIFI信道&quot;,&quot;WIFIChannel&quot;);</span><br><span class="line">        cnEnMap.put(&quot;百度经度&quot;,&quot;baiduLongitude&quot;);</span><br><span class="line">        cnEnMap.put(&quot;百度纬度&quot;,&quot;baiduLatitude&quot;);</span><br><span class="line">        cnEnMap.put(&quot;原始经度&quot;,&quot;originalLongitude&quot;);</span><br><span class="line">        cnEnMap.put(&quot;原始纬度&quot;,&quot;originalLatitude&quot;);</span><br><span class="line">        cnEnMap.put(&quot;定位精度&quot;,&quot;positioningPrecision&quot;);</span><br><span class="line">        cnEnMap.put(&quot;定位类型&quot;,&quot;positioningType&quot;);</span><br><span class="line">        cnEnMap.put(&quot;数据业务类型&quot;,&quot;businessType&quot;);</span><br><span class="line">        cnEnMap.put(&quot;网络类型&quot;,&quot;networkType&quot;);</span><br><span class="line">        cnEnMap.put(&quot;速度类型&quot;,&quot;speedType&quot;);</span><br><span class="line">        cnEnMap.put(&quot;TAC&quot;,&quot;tac&quot;);</span><br><span class="line">        cnEnMap.put(&quot;ECI&quot;,&quot;eci&quot;);</span><br><span class="line">        cnEnMap.put(&quot;MNC&quot;,&quot;mnc&quot;);</span><br><span class="line">        cnEnMap.put(&quot;MCC&quot;,&quot;mcc&quot;);</span><br><span class="line">        cnEnMap.put(&quot;RSRQ&quot;,&quot;rsrq&quot;);</span><br><span class="line">        cnEnMap.put(&quot;EARFCN DL&quot;,&quot;earfcnDl&quot;);</span><br><span class="line">        cnEnMap.put(&quot;EARFCN UL&quot;,&quot;earfcnUl&quot;);</span><br><span class="line">        cnEnMap.put(&quot;FREQUENCY DL&quot;,&quot;frequencyDl&quot;);</span><br><span class="line">        cnEnMap.put(&quot;BAND&quot;,&quot;band&quot;);</span><br><span class="line">        cnEnMap.put(&quot;SINR&quot;,&quot;sinr&quot;);</span><br><span class="line">        cnEnMap.put(&quot;CDMA RXLEV&quot;,&quot;cdmaRxlev&quot;);</span><br><span class="line">        cnEnMap.put(&quot;EVDO RXLEV&quot;,&quot;evdoRxlev&quot;);</span><br><span class="line">        cnEnMap.put(&quot;EARFCN&quot;,&quot;earfcn&quot;);</span><br><span class="line">        cnEnMap.put(&quot;PSC&quot;,&quot;psc&quot;);</span><br><span class="line">        cnEnMap.put(&quot;UARFCN&quot;,&quot;uarfcn&quot;);</span><br><span class="line">        cnEnMap.put(&quot;RSCP&quot;,&quot;rscp&quot;);</span><br><span class="line">        cnEnMap.put(&quot;RSRP&quot;,&quot;rsrp&quot;);</span><br><span class="line">        cnEnMap.put(&quot;IMSI&quot;,&quot;imsi&quot;);</span><br><span class="line">        cnEnMap.put(&quot;IMEI&quot;,&quot;imei&quot;);</span><br><span class="line">        cnEnMap.put(&quot;LAC&quot;,&quot;lac&quot;);</span><br><span class="line">        cnEnMap.put(&quot;CI&quot;,&quot;ci&quot;);</span><br><span class="line">        cnEnMap.put(&quot;信号强度&quot;,&quot;signalStrength&quot;);</span><br><span class="line">        cnEnMap.put(&quot;SNR&quot;,&quot;snr&quot;);</span><br><span class="line">        cnEnMap.put(&quot;PCI&quot;,&quot;pci&quot;);</span><br><span class="line">        cnEnMap.put(&quot;NID&quot;,&quot;nid&quot;);</span><br><span class="line">        cnEnMap.put(&quot;BID&quot;,&quot;bid&quot;);</span><br><span class="line">        cnEnMap.put(&quot;SID&quot;,&quot;sid&quot;);</span><br><span class="line">        cnEnMap.put(&quot;CDMA DBM&quot;,&quot;cdmaDbm&quot;);</span><br><span class="line">        cnEnMap.put(&quot;CDMA ECIO&quot;,&quot;cdmaEcio&quot;);</span><br><span class="line">        cnEnMap.put(&quot;EVDO DBM&quot;,&quot;evdoDbm&quot;);</span><br><span class="line">        cnEnMap.put(&quot;EVDO ECIO&quot;,&quot;evdoEcio&quot;);</span><br><span class="line">        cnEnMap.put(&quot;EVDO SNR&quot;,&quot;evdoSnr&quot;);</span><br><span class="line">        cnEnMap.put(&quot;ARFCN&quot;,&quot;arfcn&quot;);</span><br><span class="line">        cnEnMap.put(&quot;FREQUENCY UL&quot;,&quot;frequencyUl&quot;);</span><br><span class="line">        cnEnMap.put(&quot;BSIC&quot;,&quot;bsic&quot;);</span><br><span class="line">        cnEnMap.put(&quot;RXLEV&quot;,&quot;rxlev&quot;);</span><br><span class="line">        cnEnMap.put(&quot;速率&quot;,&quot;averageSpeed&quot;);</span><br><span class="line">        cnEnMap.put(&quot;更正后经度&quot;,&quot;updatedLongitude&quot;);</span><br><span class="line">        cnEnMap.put(&quot;更正后纬度&quot;,&quot;updatedLatitude&quot;);</span><br><span class="line">        cnEnMap.put(&quot;上行平均速率&quot;,&quot;averageUpstreamRate&quot;);</span><br><span class="line">        cnEnMap.put(&quot;下行平均速率&quot;,&quot;averageDownstreamRate&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到就是一个动态的map。</p><h1 id="映射类"><a href="#映射类" class="headerlink" title="映射类"></a>映射类</h1><p>接下来就是核心代码啦。我们创建一个ReflectHelper类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">public class ReflectHelper &#123;</span><br><span class="line"></span><br><span class="line">    private Class cls;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 传过来的对象</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private Object obj;</span><br><span class="line">    private Hashtable&lt;String, Method&gt; getMethods &#x3D; null;</span><br><span class="line">    private Hashtable&lt;String, Method&gt; setMethods &#x3D; null;</span><br><span class="line">    public ReflectHelper(Object o) &#123;</span><br><span class="line">        obj &#x3D; o;</span><br><span class="line">        initMethods();</span><br><span class="line">    &#125;</span><br><span class="line">    public void initMethods() &#123;</span><br><span class="line">        getMethods &#x3D; new Hashtable&lt;&gt;();</span><br><span class="line">        setMethods &#x3D; new Hashtable&lt;&gt;();</span><br><span class="line">        cls &#x3D; obj.getClass();</span><br><span class="line">        Method[] methods &#x3D; cls.getMethods();</span><br><span class="line">        &#x2F;&#x2F; 定义正则表达式，从方法中过滤出getter &#x2F; setter 函数.</span><br><span class="line">        String gs &#x3D; &quot;get(\\w )&quot;;</span><br><span class="line">        Pattern getM &#x3D; Pattern.compile(gs);</span><br><span class="line">        String ss &#x3D; &quot;set(\\w )&quot;;</span><br><span class="line">        Pattern setM &#x3D; Pattern.compile(ss);</span><br><span class="line">        &#x2F;&#x2F; 把方法中的&quot;set&quot; 或者 &quot;get&quot; 去掉,$1匹配第一个</span><br><span class="line">        String rapl &#x3D; &quot;$1&quot;;</span><br><span class="line">        String param;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; methods.length;   i) &#123;</span><br><span class="line">            Method m &#x3D; methods[i];</span><br><span class="line">            String methodName &#x3D; m.getName();</span><br><span class="line">            if (Pattern.matches(gs, methodName)) &#123;</span><br><span class="line">                param &#x3D; getM.matcher(methodName).replaceAll(rapl).toLowerCase();</span><br><span class="line">                getMethods.put(param, m);</span><br><span class="line">            &#125; else if (Pattern.matches(ss, methodName)) &#123;</span><br><span class="line">                param &#x3D; setM.matcher(methodName).replaceAll(rapl).toLowerCase();</span><br><span class="line">                setMethods.put(param, m);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public boolean setMethodValue(String property,Object object) &#123;</span><br><span class="line">        Method m &#x3D; setMethods.get(property.toLowerCase());</span><br><span class="line">        if (m !&#x3D; null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                &#x2F;&#x2F; 调用目标类的setter函数</span><br><span class="line">                m.invoke(obj, object);</span><br><span class="line">                return true;</span><br><span class="line">            &#125; catch (Exception ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码可以看到其实也就两个方法setMethodValue 和initMethods 。<br>initMethods 方法是在实例化 ReflectHelper 这个类的时候执行的，主要的工作就是找到我们需要动态注入实例类的get 和set 方法。而setMethodValue 方法就是给这个属性赋值的。</p><h1 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h1><p> 现在准备工作做好了，怎么使用呢?<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">private List&lt;BaseDateBean&gt; getBaseDateBean(List&lt;Map&lt;String, Object&gt;&gt; mapList)&#123;</span><br><span class="line">       List&lt;BaseDateBean&gt; list&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">       if(mapList&#x3D;&#x3D;null||mapList.isEmpty())&#123;</span><br><span class="line">           return list;</span><br><span class="line">       &#125;</span><br><span class="line">       BaseDateBean baseDateBean;</span><br><span class="line">       for(Map&lt;String, Object&gt; map:mapList)&#123;</span><br><span class="line">           baseDateBean&#x3D;new BaseDateBean();</span><br><span class="line">           for(Map.Entry&lt;String, Object&gt; entry : map.entrySet())&#123;</span><br><span class="line">               String mapKey &#x3D; entry.getKey();</span><br><span class="line">               log.info(mapKey);</span><br><span class="line">               ReflectHelper reflectHelper &#x3D; new ReflectHelper(baseDateBean);</span><br><span class="line">               log.info(BaseDataMap.cnEnMap.get(mapKey));</span><br><span class="line">               String value&#x3D;entry.getValue()&#x3D;&#x3D;null?ConstantPool.SEPARATORNULL:entry.getValue().toString();</span><br><span class="line">               log.info(value);</span><br><span class="line">               if(entry.getValue()!&#x3D;null)&#123;</span><br><span class="line">                   reflectHelper.setMethodValue(BaseDataMap.cnEnMap.get(mapKey),String.valueOf(entry.getValue()));</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           list.add(baseDateBean);</span><br><span class="line">       &#125;</span><br><span class="line">       return list;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><br> 遍历list 集合中的map，动态的将属性值注入到实体类中。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 动态注入 </tag>
            
            <tag> 映射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《剑指offer》之栈的压入、弹出序列</title>
      <link href="/2021/07/09/%E3%80%8A%E5%89%91%E6%8C%87offer%E3%80%8B%E4%B9%8B%E6%A0%88%E7%9A%84%E5%8E%8B%E5%85%A5%E3%80%81%E5%BC%B9%E5%87%BA%E5%BA%8F%E5%88%97/"/>
      <url>/2021/07/09/%E3%80%8A%E5%89%91%E6%8C%87offer%E3%80%8B%E4%B9%8B%E6%A0%88%E7%9A%84%E5%8E%8B%E5%85%A5%E3%80%81%E5%BC%B9%E5%87%BA%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们关于栈的题目，这两天做的还是挺多的，无非就是压栈出栈。</p><a id="more"></a><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>输入两个数组，第一个是入栈的顺序，第二个是出栈的顺序，判断第二个数组出栈的顺序是否正确。<br>比如入栈：1，2，3，4，5<br>那出栈：5，4，3，2，1 可以<br>4，5，3，2，1也可以。<br>4，5，3，1，2就不行。<br>所以我们遍历第二个数组，找到在第一个数组找中的位置，这样在这之前的都先入栈，然后出栈。最后栈内容为空则表示，出栈的顺序是可以的，否则就不行。<br>具体例子说明，比较清楚。<br>比如list1：{1,2,3,4,5}<br>list2：｛4，5，3，2，1｝<br>先遍历数组list2<br>第一个为4，找到在list1 中的位置为3记录下来，将前面的数字都入栈。这时栈中的数据为1-&gt;2-&gt;3-&gt;4<br>然后出栈4，此时栈的数据为1-&gt;2-&gt;3。<br>第二个为5，找到在list1 中为4大于3 ，位置为4记录下来，所以将list1 中的3+1 到4的数据压入栈中，即将5压入栈，此时栈的数据为：1-&gt;2-&gt;3-&gt;5<br>然后出栈5，此时栈的数据为1-&gt;2-&gt;3<br>第三个为3，此时在list1 中的位置为2小于4，等于3，直接出栈。此时栈的数据为1-&gt;2<br>第四个为2，此时在list1 中的位置为1小于4，等于2，直接出栈。此时栈的数据为1<br>第四个为1，此时在list1 中的位置为0小于4，等于1，直接出栈。此时栈的数据为空<br>所以说明list2 是一种出栈方式。</p><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public boolean IsPopOrder(int [] pushA,int [] popA) &#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack&#x3D;new Stack&lt;&gt;();</span><br><span class="line">        if(pushA&#x3D;&#x3D;null||popA&#x3D;&#x3D;null||popA.length&#x3D;&#x3D;0||pushA.length&#x3D;&#x3D;0)&#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        int temp&#x3D;-1;</span><br><span class="line">        for(int i&#x3D;0;i&lt;popA.length;i++)&#123;</span><br><span class="line">            int j&#x3D;0;</span><br><span class="line">&#x2F;&#x2F;找到i 在list1 中的位置。</span><br><span class="line">            while(j&lt;popA.length &amp;&amp;pushA[j]!&#x3D;popA[i])&#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;如果找不到，则返回false</span><br><span class="line">            if(j&#x3D;&#x3D;popA.length)&#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            while(temp&lt;j)&#123;</span><br><span class="line">                temp++;</span><br><span class="line">                stack.push(pushA[temp]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;如果相等，则出栈</span><br><span class="line">            if(stack.peek()&#x3D;&#x3D;popA[i])&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;如果为空，为真</span><br><span class="line">        if(stack.isEmpty())&#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>main  方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        int [] pushA&#x3D;&#123;1,2,3,4,5&#125;;</span><br><span class="line">        int [] popA&#x3D;&#123;4,5,3,2,1&#125;;</span><br><span class="line">        Solution solution&#x3D;new Solution();</span><br><span class="line">        boolean b&#x3D;solution.IsPopOrder(pushA,popA);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200206160102966.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9xdWVsbGFuYW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200206160123471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9xdWVsbGFuYW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 《剑指offer》 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《剑指offer》之顺时针打印矩阵</title>
      <link href="/2021/07/09/%E3%80%8A%E5%89%91%E6%8C%87offer%E3%80%8B%E4%B9%8B%E9%A1%BA%E6%97%B6%E9%92%88%E6%89%93%E5%8D%B0%E7%9F%A9%E9%98%B5/"/>
      <url>/2021/07/09/%E3%80%8A%E5%89%91%E6%8C%87offer%E3%80%8B%E4%B9%8B%E9%A1%BA%E6%97%B6%E9%92%88%E6%89%93%E5%8D%B0%E7%9F%A9%E9%98%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天做一道关于矩阵的题目。思路很简单，就是要考虑全面。</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下4 X 4矩阵： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>就是顺时针打印，不能重复打印元素。注意四个变量，上下左右。<br><img src="https://img-blog.csdnimg.cn/20200205114303573.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9xdWVsbGFuYW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><p>我们先直接思路解题，代码不是很简洁，但是思路算是比较清晰，先判断数组是否为空。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">public ArrayList&lt;Integer&gt; printMatrix(int [][] matrix) &#123;</span><br><span class="line">        if(matrix&#x3D;&#x3D;null)&#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        ArrayList&lt;Integer&gt; list&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        &#x2F;&#x2F;设置四个边界值。</span><br><span class="line">        int n&#x3D;matrix.length;</span><br><span class="line">        int m&#x3D;matrix[0].length;</span><br><span class="line">        int x&#x3D;0;</span><br><span class="line">        int y&#x3D;0;</span><br><span class="line">        while(n&gt;x &amp;&amp; m&gt;y)&#123;</span><br><span class="line">            int i&#x3D;x;</span><br><span class="line">            int j&#x3D;y;</span><br><span class="line">            &#x2F;&#x2F;最外层从左往右输出</span><br><span class="line">            while(j&lt;m)&#123;</span><br><span class="line">                list.add(matrix[i][j]);</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            j--;</span><br><span class="line">            i++;</span><br><span class="line">            &#x2F;&#x2F;最外层从上往下输出</span><br><span class="line">            while(i&lt;n)&#123;</span><br><span class="line">                list.add(matrix[i][j]);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            i--;</span><br><span class="line">            j--;</span><br><span class="line">            &#x2F;&#x2F;最外层从右往左输出，注意排除和前面的从左往右重复</span><br><span class="line">            while(j&gt;&#x3D;y&amp;&amp;n!&#x3D;x+1)&#123;</span><br><span class="line">                list.add(matrix[i][j]);</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            j++;</span><br><span class="line">            i--;</span><br><span class="line">            &#x2F;&#x2F;最外层从下往上输出，注意排除和前面的从上往下重复</span><br><span class="line">            while(i&gt;x &amp;&amp;m!&#x3D;y+1)&#123;</span><br><span class="line">                list.add(matrix[i][j]);</span><br><span class="line">                i--;</span><br><span class="line">            &#125;</span><br><span class="line">            n--;</span><br><span class="line">            m--;</span><br><span class="line">            x++;</span><br><span class="line">            y++;</span><br><span class="line">        &#125;</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>main 方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        int [][]matrix&#x3D;&#123;&#123;1,2,3,4,5&#125;,&#123;6,7,8,9,10&#125;,&#123;11,12,13,14,15&#125;&#125;;</span><br><span class="line">        &#x2F;&#x2F;int [][]matrix&#x3D;&#123;&#123;1,2,3,4&#125;,&#123;5,6,7,8&#125;,&#123;9,10,11,12&#125;,&#123;13,14,15,16&#125;,&#123;17,18,19,20&#125;&#125;;</span><br><span class="line">        for(int i&#x3D;0;i&lt;matrix.length;i++)&#123;</span><br><span class="line">            for (int j&#x3D;0;j&lt;matrix[0].length;j++)&#123;</span><br><span class="line">                System.out.print(matrix[i][j]+&quot;\t&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        Solution solution&#x3D;new Solution();</span><br><span class="line">        ArrayList&lt;Integer&gt; list&#x3D;solution.printMatrix(matrix);</span><br><span class="line">        for(int i&#x3D;0;i&lt;list.size();i++)&#123;</span><br><span class="line">            System.out.print(list.get(i)+&quot;\t&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020020511575325.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9xdWVsbGFuYW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200205115848197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9xdWVsbGFuYW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 《剑指offer》 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《剑指offer》之扑克牌顺子</title>
      <link href="/2021/07/09/%E3%80%8A%E5%89%91%E6%8C%87offer%E3%80%8B%E4%B9%8B%E6%89%91%E5%85%8B%E7%89%8C%E9%A1%BA%E5%AD%90/"/>
      <url>/2021/07/09/%E3%80%8A%E5%89%91%E6%8C%87offer%E3%80%8B%E4%B9%8B%E6%89%91%E5%85%8B%E7%89%8C%E9%A1%BA%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>接着来刷一道简单的算法题</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>LL今天心情特别好,因为他去买了一副扑克牌,发现里面居然有2个大王,2个小王(一副牌原本是54张^_^)…他随机从中抽出了5张牌,想测测自己的手气,看看能不能抽到顺子,如果抽到的话,他决定去买体育彩票,嘿嘿！！“红心A,黑桃3,小王,大王,方片5”,“Oh My God!”不是顺子…..LL不高兴了,他想了想,决定大\小 王可以看成任何数字,并且A看作1,J为11,Q为12,K为13。上面的5张牌就可以变成“1,2,3,4,5”(大小王分别看作2和4),“So Lucky!”。LL决定去买体育彩票啦。 现在,要求你使用这幅牌模拟上面的过程,然后告诉我们LL的运气如何， 如果牌能组成顺子就输出true，否则就输出false。为了方便起见,你可以认为大小王是0。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>就是一个数组，0表示大小王，可以当癞子，其他的最小是1，最大是13，求给出的这个数组能否组成顺子。</p><p>我们仔细想想一个正常的顺子，比如6，7，8，9，10.<br>那最大值和最小值差为4，并且不能重复。所以我们应该得出两个结论。<br>1，最大值和最小值相差小于等于4，为什么会小于4呢，因为有癞子0导致的。<br>2.除了癞子0以外，其他的数字不能重复。</p><p>所以根据上面的条件我们就可以写出算法了。<br>求出最小值，最大值。</p><p>重复数字怎么判断呢？<br>先判断是否为0，不为0，将这个数字作为脚标存到另一个数组中，并计数加1，从而判断是否重复。</p><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public boolean isContinuous(int [] numbers) &#123;</span><br><span class="line">        int count[]&#x3D;new int[14];</span><br><span class="line">        if(numbers&#x3D;&#x3D;null|| numbers.length&lt;1)&#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        int min&#x3D;14;</span><br><span class="line">        int max&#x3D;0;</span><br><span class="line">        for(int i&#x3D;0;i&lt;numbers.length;i++)&#123;</span><br><span class="line">            if(numbers[i]&#x3D;&#x3D;0)&#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;else if(count[numbers[i]]&gt;0) &#123;</span><br><span class="line">           &#x2F;&#x2F;如果存在重复的数字就返回false;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;else if(numbers[i]&lt;min)&#123;</span><br><span class="line">                    min&#x3D;numbers[i];</span><br><span class="line">            &#125;else if(numbers[i]&gt;max)&#123;</span><br><span class="line">                    max&#x3D;numbers[i];</span><br><span class="line">            &#125;</span><br><span class="line">            count[numbers[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        if(max-min&lt;5)&#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>main方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        Solution solution&#x3D;new Solution();</span><br><span class="line">        int array[]&#x3D;&#123;1,5,3,3,4,&#125;;</span><br><span class="line">        System.out.println(solution.isContinuous(array));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200213145742670.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020021314504021.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="番外"><a href="#番外" class="headerlink" title="番外"></a>番外</h1><p>测试的时候发现牛客上的这道题测试用例不全。比如我最开始这样写的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">for(int i&#x3D;0;i&lt;numbers.length;i++)&#123;</span><br><span class="line">            if(numbers[i]&#x3D;&#x3D;0)&#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;else if(numbers[i]&#x3D;&#x3D;min||numbers[i]&#x3D;&#x3D; max) &#123;</span><br><span class="line">             &#x2F;&#x2F;如果存在重复的数字就返回false;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;else if(numbers[i]&lt;min)&#123;</span><br><span class="line">                    min&#x3D;numbers[i];</span><br><span class="line">            &#125;else if(numbers[i]&gt;max)&#123;</span><br><span class="line">                    max&#x3D;numbers[i];</span><br><span class="line">            &#125;</span><br><span class="line">            count[numbers[i]]++;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>可以看到我通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(numbers[i]&#x3D;&#x3D;min||numbers[i]&#x3D;&#x3D; max</span><br></pre></td></tr></table></figure><p>来判断是否存在重复的数字，其实这是不正确的，比如我是上面的测试用例1,5,3,3,4就不满足上面的要求。<br><img src="https://img-blog.csdnimg.cn/20200213145701645.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到返回的是true,实际应该是false才对，算法不正确的，但是提交到牛客上竟然通过了，有点无语，也不敢问哈哈<br><img src="https://img-blog.csdnimg.cn/20200213150031632.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 《剑指offer》 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、docker 入坑(win10和Ubuntu 安装)</title>
      <link href="/2021/06/28/%E4%B8%80%E3%80%81docker%20%E5%85%A5%E5%9D%91(win10%E5%92%8CUbuntu%20%E5%AE%89%E8%A3%85)/"/>
      <url>/2021/06/28/%E4%B8%80%E3%80%81docker%20%E5%85%A5%E5%9D%91(win10%E5%92%8CUbuntu%20%E5%AE%89%E8%A3%85)/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>终究还是绕不过去了，要学的知识真的是太多了，好在我们还有时间，docker 之前只闻其声，不曾真正的接触过，现在docker 越来越火，很多公司也都开始使用了。所以对于我们程序员而言，又得修炼一项必备技能了。<br>所以让我们勇敢的踏出第一步，学海无涯，让我们一步一个脚印。从安装开始讲起吧。</p><a id="more"></a><h1 id="windows10安装"><a href="#windows10安装" class="headerlink" title="windows10安装"></a>windows10安装</h1><p>参考：<a href="https://yeasy.gitbooks.io/docker_practice/content/install/windows.html" target="_blank" rel="noopener">https://yeasy.gitbooks.io/docker_practice/content/install/windows.html</a></p><h2 id="开启Hyper-V"><a href="#开启Hyper-V" class="headerlink" title="开启Hyper-V"></a>开启Hyper-V</h2><p>win10 安装需要先开启 Hyper-V。<br>控制面板–&gt;所有控制面板项–&gt;程序和功能–&gt;启用或关闭 Windows 功能<br><img src="https://img-blog.csdnimg.cn/20191015213331400.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70" alt="file"></p><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>然后下载安装程序：<br>[Stable](<a href="https://download.docker.com/win/stable/Docker" target="_blank" rel="noopener">https://download.docker.com/win/stable/Docker</a> Desktop Installer.exe)<br> 或者<br>[Edge](<a href="https://download.docker.com/win/edge/Docker" target="_blank" rel="noopener">https://download.docker.com/win/edge/Docker</a> Desktop Installer.exe)</p><p>下载下来之后直接双击运行完成后的截图。<br><img src="https://img-blog.csdnimg.cn/20191015213331663.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70" alt="file"></p><p>点击close and log out 会重启电脑。</p><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p>重启完电脑后，在我们的导航栏会有docker 的图标，点击图标，选择setting ,genneral 勾选最后一个选项。</p><p><img src="https://img-blog.csdnimg.cn/2019101521333212.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70" alt="file"></p><p>设置镜像，我们使用国内的镜像，会让我们下载速度提升，在setting的daemon中设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;registry.docker-cn.com</span><br><span class="line">https:&#x2F;&#x2F;dockerhub.azk8s.cn</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191015213332342.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70" alt="file"></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在cmd 控制台查看docker  版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191015213332615.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70" alt="file"></p><p>运行hello-world 镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191015213332178.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70" alt="file"></p><p>证明docker在win 10 上安装成功啦。至于接下来怎么使用，我们下篇再讲。</p><h1 id="Ubuntu-安装"><a href="#Ubuntu-安装" class="headerlink" title="Ubuntu 安装"></a>Ubuntu 安装</h1><p>我的是Ubuntu18.0.4 的，安装方法也很简单。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#卸载旧版本</span><br><span class="line">sudo apt-get remove docker docker-engine docker.io</span><br><span class="line"></span><br><span class="line"># 安装包更新</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"># 安装依赖</span><br><span class="line">sudo apt-get install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line"></span><br><span class="line"># 加Docker官方GPG key</span><br><span class="line">sudo curl -fsSL https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu&#x2F;gpg | sudo apt-key add -</span><br><span class="line"></span><br><span class="line">#设置稳定版的Docker仓库</span><br><span class="line">sudo add-apt-repository &quot;deb [arch&#x3D;amd64] https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu $(lsb_release -cs) stable&quot;</span><br><span class="line"></span><br><span class="line">#安装 docker-ce</span><br><span class="line">sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure><p>查看安装docker版本 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191015213333222.jpeg" alt="file"></p><p>运行hello-world</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p>发现并没有出现下面错误</p><p><img src="https://img-blog.csdnimg.cn/20191015213333511.jpeg" alt="file"></p><p>docker进程使用Unix Socket而不是TCP端口。而默认情况下，Unix socket属于root用户，需要root权限才能访问。<br>所以使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><p>或者并将当前用户加入到docker用户组中。<br>默认情况下，docker 命令会使用 Unix socket 与 Docker 引擎通讯。而只有 root 用户和 docker 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 root 用户。因此，更好地做法是将需要使用 docker 的用户加入 docker 用户组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#建立 docker 组：</span><br><span class="line">sudo groupadd docker</span><br><span class="line"></span><br><span class="line"># 将当前用户加入 docker 组：</span><br><span class="line">sudo usermod -aG docker $USER</span><br><span class="line"></span><br><span class="line">#更新用户组</span><br><span class="line">newgrp docker     </span><br><span class="line"></span><br><span class="line">#测试docker命令是否可以使用sudo正常使用</span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191015213334263.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70" alt="file"></p><h1 id="番外"><a href="#番外" class="headerlink" title="番外"></a>番外</h1><p>到此为止，我们的win10 环境和ubuntu 环境都已经搭建好docker 啦。下篇就让我们继续学习怎么使用docker 吧。</p><p>好了，就说这么多啦</p><p>后续加油♡</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、Vue 世界初探</title>
      <link href="/2021/06/07/%E4%B8%80%E3%80%81Vue%20%E4%B8%96%E7%95%8C%E5%88%9D%E6%8E%A2/"/>
      <url>/2021/06/07/%E4%B8%80%E3%80%81Vue%20%E4%B8%96%E7%95%8C%E5%88%9D%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们后端用SpringBoot 框架已经搭建的差不多了之前，既然我们最初的梦想是做先后端分离的架手架，终于也开始学习一下前端的框架了。自己也算是前端小白，所以将自己学习vue 的过程记录系列博客。希望对学习vue 的小伙伴有帮助，用时文章中有不对的，希望大家及时提出一起探讨。</p><p>至于为什么要使用vue ,虽然是一个前端小白，但是还是知道当前主流的三大框架，Angular、React以及Vue .优劣我就不说了，我就说说我为什么选择vue 吧。其实还是因为毕竟是后端开发，对前端的东西不要求深入理解，做到能用能复制就好了。所以基本上是本着最小学习成本来的。所以相对Angular 和React来说，vue 算是上手最快的，所以也就入坑了。自己话了一周的时间预研，勉强算自己入门了吧，所以才开始写博客记录下来，这样也算是对自己学习的内容的整理，也可以记录下来方便大家。</p><h1 id="学习地址"><a href="#学习地址" class="headerlink" title="学习地址"></a>学习地址</h1><p>想要了解vue 是什么， 怎么学习？我也是参考网上的资料学习的。</p><p>vue.js 的官网：<a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/</a></p><p>菜鸟教程：<a href="https://www.runoob.com/vue2/vue-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/vue2/vue-tutorial.html</a></p><p>gitBook: <a href="http://vue_book.siwei.me/preface.html" target="_blank" rel="noopener">http://vue_book.siwei.me/preface.html</a></p><p>自己感觉官网上和菜鸟教程上，对自己的作用只是熟悉的了vue的语法，不足以我来搭建在项目中使用，但是又不能不看，不然基本的语法都不知道，怎么开展下一步。上面的gitBook 算是带我入门的，我也在网上找了很多资料，但是跟着gitBook一步步实现起来，整体流程算是清楚了，所以也推荐大家。自己记录这系列博客，也算自己vue入门吧，有不对的地方大家多多指教。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>好啦，说了这么多，我们正式开始吧。<br>我们直接使用vue-cli .当然大家亦可以使用其他的。我们首先电脑上 npm和git 并配置邮箱 ,至于怎么安装，网上有很多教程，这里就不说了，安装好之后，我们需要安装vue-cli 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue vue-cli -g</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191217152520839.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9xdWVsbGFuYW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="file"></p><p>安装好之后，我们控制台我们想要创建项目的目录执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack zlflovemmVue</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2019121715252191.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9xdWVsbGFuYW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="file"><br><img src="https://img-blog.csdnimg.cn/20191217152516658.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9xdWVsbGFuYW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="file"></p><p>这样就可以看到项目已经初始化成功了。我们现在用IDEA 打开这个项目，当然大家也可以用其他的，后端的用惯了idea ,所以也就用idea 来开发vue 啦。</p><h1 id="IDEA-配置vue"><a href="#IDEA-配置vue" class="headerlink" title="IDEA 配置vue"></a>IDEA 配置vue</h1><p>我们既然使用idea,当然需要一些配置，不使用idea 的可以忽略。<br>1、我们打开settings 下载vue.js 插件，然后重启。打开我们创建的项目zlflovemmVue<br><img src="https://img-blog.csdnimg.cn/20191217152521604.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9xdWVsbGFuYW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="file"></p><p>2、配置js 版本 ECMAScript6<br><img src="https://img-blog.csdnimg.cn/20191217152521850.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9xdWVsbGFuYW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="file"></p><p>3、HTML 增加 .vue 支持<br><img src="https://img-blog.csdnimg.cn/20191217152522158.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9xdWVsbGFuYW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="file"></p><p>4、启动项目，在edit Configurations 中增加npm 启动，配置如下图：<br><img src="https://img-blog.csdnimg.cn/20191217152522446.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9xdWVsbGFuYW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="file"></p><p> 配置好后，我们来启动就好啦，如下图就表示启动成功啦。<br> <img src="https://img-blog.csdnimg.cn/20191217152522785.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9xdWVsbGFuYW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="file"><br> 我们启动成后，在浏览器上输入：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:8081</span><br></pre></td></tr></table></figure><br> <img src="https://img-blog.csdnimg.cn/2019121715252398.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9xdWVsbGFuYW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="file"></p><p> 证明我们项目已经初始化搭建完成啦。到这里我们已经完成了第一步。但是可以看到我们到现在为止还没有开始写代码，也不知道如何下手写。</p><p> 不要急，我们前面这些工作做好后，我们接下来就开始啦。</p><h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><p> 虽然我们项目稀里糊涂的启动起来了，但是相比到此的小伙伴还是一头雾水，在那写我们的代码呢？整个流程是怎么样的呢？<br>在写代码之前，我们还是先来看看，vue-cli 初始化为我们创建的项目有哪些东西。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">▸ build&#x2F;                &#x2F;&#x2F; 编译用到的脚本</span><br><span class="line">▸ config&#x2F;               &#x2F;&#x2F; 各种配置</span><br><span class="line">▸ dist&#x2F;                 &#x2F;&#x2F; 打包后的文件夹</span><br><span class="line">▸ node_modules&#x2F;         &#x2F;&#x2F; node第三方包</span><br><span class="line">▸ src&#x2F;                  &#x2F;&#x2F; 源代码</span><br><span class="line">▸ static&#x2F;               &#x2F;&#x2F; 静态文件, 暂时无用</span><br><span class="line">  index.html            &#x2F;&#x2F; 最外层文件</span><br><span class="line">  package.json          &#x2F;&#x2F; node项目配置文件</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191217152523389.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9xdWVsbGFuYW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="file"></p><h2 id="build"><a href="#build" class="headerlink" title="build"></a>build</h2><p>保留各种打包脚本。不可或缺，不要随意修改。</p><p>展开后如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">▾ build&#x2F;</span><br><span class="line">    build.js                  &#x2F;&#x2F;打包使用， 不要修改。</span><br><span class="line">    check-versions.js        &#x2F;&#x2F;检查npm的版本， 不要修改。</span><br><span class="line">    dev-client.js            &#x2F;&#x2F;是在开发时使用的服务器脚本。不要修改。</span><br><span class="line">    dev-server.js           &#x2F;&#x2F;同上</span><br><span class="line">    utils.js                &#x2F;&#x2F; 不要修改。 做一些css&#x2F;sass 等文件的生成。</span><br><span class="line">    vue-loader.conf.js     &#x2F;&#x2F;非常重要的配置文件，不要修改。内容是用来辅助加载vuejs用到的css source map等内容。</span><br><span class="line">    webpack.base.conf.js     &#x2F;&#x2F;下面这三个都是基本的配置文件。不要修改</span><br><span class="line">    webpack.dev.conf.js</span><br><span class="line">    webpack.prod.conf.js</span><br></pre></td></tr></table></figure><p>我们初学者阶段，暂时不用管这些，也不改这些东西。</p><h2 id="config"><a href="#config" class="headerlink" title="config"></a>config</h2><p>上图我们可以看到config 目录中就有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">▾ config&#x2F;</span><br><span class="line">    dev.env.js</span><br><span class="line">    index.js</span><br><span class="line">    prod.env.js</span><br><span class="line">test.env.js</span><br></pre></td></tr></table></figure><p>dev.env.js 开发模式下的配置文件，一般不用修改。<br>prod.env.js 生产模式下的配置文件，一般不用修改。<br>test.env.js 测试模式下的配置文件，一般不用修改。<br>index.js 很重要的文件， 定义了 开发时的端口（默认是8080），定义了图片文件夹（默认static)， 定义了开发模式下的 代理服务器. 我们修改的还是比较多的。</p><h2 id="node-modules"><a href="#node-modules" class="headerlink" title="node_modules"></a>node_modules</h2><p>node项目所用到的第三方包，特别多，特别大。 $ npm install 所产生。<br>这个文件夹不要放到git中</p><h2 id="src"><a href="#src" class="headerlink" title="src"></a>src</h2><p>最最核心的源代码所在的目录。我们要写的代码就是写在这个里面啦。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">▾ src&#x2F;</span><br><span class="line">  ▾ assets&#x2F;</span><br><span class="line">      logo.png</span><br><span class="line">  ▾ components&#x2F;</span><br><span class="line">      Hello.vue</span><br><span class="line">  ▾ router&#x2F;</span><br><span class="line">      index.js</span><br><span class="line">    App.vue</span><br><span class="line">    main.js</span><br></pre></td></tr></table></figure><p>assets: 用到的图片</p><p>components: 用到的”视图”和”组件”所在的文件夹。（最最核心）</p><p>router/index.js 路由文件。 定义了各个页面对应的url.</p><p>App.vue 如果index.html 是一级页面模板的话，这个App.vue就是二级页面模板。 所有的其他vuejs页面，都作为该模板的 一部分被渲染出来。</p><p>main.js 废代码。没有实际意义，但是为了支撑整个vuejs框架，存在很必要。</p><h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><p>好啦，我们已经知道了项目的结构了，现在就要开始实现我们自己的hello world 啦。不然我们当程序员还有什么意义。<br>其实我们程序已经帮我们写了一个helloworld 。但是我们还是自己来创建一个，这样自己才能熟悉点。最终添加的内容图如下：</p><p><img src="https://img-blog.csdnimg.cn/20191217152520333.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9xdWVsbGFuYW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="file"></p><h2 id="Hello-vue"><a href="#Hello-vue" class="headerlink" title="Hello.vue"></a>Hello.vue</h2><p>我们在src–components 新建Hello.vue 。内容如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        data()&#123;</span><br><span class="line">          return &#123;</span><br><span class="line">            message: &quot;hello world&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>可以看到内容很简单，就是返回一个hello world 。</p><h2 id="修改index-js"><a href="#修改index-js" class="headerlink" title="修改index.js"></a>修改index.js</h2><p>接下来我们在src–router–index.js 中增加一个路由。</p><p><img src="https://img-blog.csdnimg.cn/20191217152524394.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9xdWVsbGFuYW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="file"></p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>这样的话我们就可以来启动项目啦。启动的时候报这种错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">✘  http:&#x2F;&#x2F;eslint.org&#x2F;docs&#x2F;rules&#x2F;indent</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191217152524963.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9xdWVsbGFuYW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="file"></p><p>启用eslint检测不通过导致的，我们这里的解决办法：</p><p> 在build/webpack.base.conf.js文件中，注释config.dev.useEslint?这行配置，然后重启项目就好了。<br> <img src="https://img-blog.csdnimg.cn/20191217152525749.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9xdWVsbGFuYW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="file"></p><p> 启动之后，我们在界面上输入：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:8081&#x2F;#&#x2F;hello</span><br></pre></td></tr></table></figure><br> <img src="https://img-blog.csdnimg.cn/20191217152520889.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9xdWVsbGFuYW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="file"></p><p> 这里我们的hello world 出来了，但是我们可能会感觉到奇怪，我们只是仅仅写了helloworld 为什么还有logo ,并且还有居中的样式。我们这个问题留在下篇文章接着将。这里我们先记着。</p><h1 id="番外"><a href="#番外" class="headerlink" title="番外"></a>番外</h1><p> 到此为止，我们也算是将vue安装成功了，并运行一个非常简单的例子。</p><p> 代码上传到github：<br><a href="https://github.com/QuellanAn/zlflovemmVue" target="_blank" rel="noopener">https://github.com/QuellanAn/zlflovemmVue</a></p><p>后续加油♡</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、springboot起航</title>
      <link href="/2019/09/18/%E4%B8%80%E3%80%81springboot%E8%B5%B7%E8%88%AA/"/>
      <url>/2019/09/18/%E4%B8%80%E3%80%81springboot%E8%B5%B7%E8%88%AA/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前零零散散的学习了一些springboot的知识，以及搭建一些springboot的项目，甚至还有一些项目应用到实际项目中了，但是突然有一天想要建一个自己的项目网站。发现自己不知道从何开始。发现自己虽然用了很久，但是让自己 从头开始搭建一个却处处碰壁。所以静下心来好好的整理一下springboot的知识点。以及给自己搭建一个springboot 项目的脚手架。以后方便自己套用。</p><h1 id="创建spring-boot项目"><a href="#创建spring-boot项目" class="headerlink" title="创建spring boot项目"></a>创建spring boot项目</h1><p>springboot的之所以火热便是因为开箱即用的特效，低配置甚至无配置使用，方便我们快速上手，我们这里先就什么都不配置吧。<br>在idea 上直接可以创建springboot 类型项目。<br><img src="https://img-blog.csdnimg.cn/20190918101453978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>项目名就随便起吧，整个系列就都以这个项目为例啦，整个项目会分享到github 上，大家需要的可以跟着下载学习。<br>建好的项目目录如下：<br><img src="https://img-blog.csdnimg.cn/20190918102640866.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>其中选中的文件夹是我自己加的，因为我想整个项目的目录大概就是这个样子了。文件名起了zlflovemm 没有什么项目含义，起名太难了，就起了一个自己纪念的名字，大家勿怪。<br>我们pom.xml 内容，因为后期不管是加其他组件，还是引用 jar 包什么的都是改这里。所以把最初版本拿出来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 https:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.8.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.quellan&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;zlflovemm&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.0&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;name&gt;zlflovemm&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;description&gt;zlflovemm project for Spring Boot&lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">    &lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure><p>可以看到pom.xml 文件里面东西很少了，parent 中是 springboot 版本信息。properties 是 jdk 版本信息。dependencies中的依赖只有一个starter-web 和starter-test 前面是这个项目支持web 项目，后面一个是支持单元测试，这两个都是创建项目的时候自带的。build 中就是项目构建打包的方式啦。这里暂时先用这种方式。</p><h1 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h1><p>我们还是来写一个hello world 吧，虽然有点幼稚，但毕竟遵循一下古训。<br>我们在controller  包下创建一个demo 包。在demo 包下创建一个 demo.java .</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class Demo &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&#x2F;&quot;)</span><br><span class="line">    public String demo()&#123;</span><br><span class="line">        return &quot;hello world&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190918134050165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>在controller 层用到的注解最多的就是@RestController 和@RequestMapping 了。@RestController和@Controller 注解是使用在controller层的。和@RequestMapping注解是用于设置映射路径的。这里注解就不深入讲解了，后面会进行深入的讲解。<br>我们代码写完之后，我们来启动项目看一下，这里我们就直接运行 ZlflovemmApplication中的 main 方法就好了。然后在浏览器输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost:8080</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190918135316609.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>到此原型已经搭建好了，可以发现我们什么都没有配置，都是使用的默认的配置，直接写的测试代码，然后就可以直接使用。</p><p>但是这样对于一个项目来说远远不够的，我们来为项目增加一些配置。</p><h1 id="配置mysql"><a href="#配置mysql" class="headerlink" title="配置mysql"></a>配置mysql</h1><p>其实一开始就配置mysql 太唐突了，但是一些小配置，不想再起一节，所以就一起了。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先当然是创建数据库和表啦，这里idea 也可以连接mysql 数据库，我们就一切都在idea上操作吧。<br><img src="https://img-blog.csdnimg.cn/20190918141251265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>配置我们数据库连接，我这里已经在我的虚拟机上搭建好了mysql,说到搭建MySQL 也遇到一些坑。没有整理成单独的博客，大家可以参考<a href="https://www.cnblogs.com/opsprobe/p/9126864.html" target="_blank" rel="noopener">Ubuntu18.04下安装MySQL</a><br><img src="https://img-blog.csdnimg.cn/20190918142127501.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>连接好之后，我们执行一下sql ,创建数据库，创建表，插入数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE &#x2F;*!32312 IF NOT EXISTS*&#x2F;&#96;zlflovemm&#96; &#x2F;*!40100 DEFAULT CHARACTER SET utf8 *&#x2F;;</span><br><span class="line">USE &#96;zlflovemm&#96;;</span><br><span class="line">CREATE TABLE &#96;sys_user&#96; (</span><br><span class="line">  &#96;id&#96; INT(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;username&#96; VARCHAR(255) NOT NULL,</span><br><span class="line">  &#96;password&#96; VARCHAR(255) NOT NULL,</span><br><span class="line">  &#96;email&#96; VARCHAR(255) NOT NULL,</span><br><span class="line">  &#96;role_code&#96; VARCHAR(255) NOT NULL,</span><br><span class="line">  &#96;role_name&#96; VARCHAR(255) NOT NULL,</span><br><span class="line">  &#96;gmt_create&#96; DATETIME NOT NULL,</span><br><span class="line">  &#96;gmt_update&#96; DATETIME NOT NULL,</span><br><span class="line">  &#96;nickname&#96; VARCHAR(255) DEFAULT NULL,</span><br><span class="line">  &#96;user_create&#96; INT(11) NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;INNODB AUTO_INCREMENT&#x3D;17 DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">&#x2F;*Data for the table &#96;sys_user&#96; *&#x2F;</span><br><span class="line"></span><br><span class="line">INSERT  INTO &#96;sys_user&#96;(&#96;id&#96;,&#96;username&#96;,&#96;password&#96;,&#96;email&#96;,&#96;role_code&#96;,&#96;role_name&#96;,&#96;gmt_create&#96;,&#96;gmt_update&#96;,&#96;nickname&#96;,&#96;user_create&#96;) VALUES (1,&#39;admin&#39;,&#39;123456&#39;,&#39;345849402@qq.com&#39;,&#39;admin&#39;,&#39;管理员&#39;,&#39;2019-03-21 14:30:57&#39;,&#39;2019-03-21 14:30:57&#39;,&#39;admin&#39;,1);</span><br></pre></td></tr></table></figure><p>我们测试一下我们数据库建成功没有。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from sys_user</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2019091814493198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这样说明我们数据库是没有问题的。</p><h2 id="pom-xml-中添加依赖"><a href="#pom-xml-中添加依赖" class="headerlink" title="pom.xml 中添加依赖"></a>pom.xml 中添加依赖</h2><p>我们现在pom.xml 中添加依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>前面两个是mysql 依赖，lombok 是方便我们getter方法和setter方法以及引入日志的。后面代码中会体现。</p><h1 id="配置application-properties"><a href="#配置application-properties" class="headerlink" title="配置application.properties"></a>配置application.properties</h1><p>在application.properties中配置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server.port&#x3D;9090</span><br><span class="line">server.servlet.context-path&#x3D;&#x2F;zlflovemm</span><br><span class="line">server.tomcat.uri-encoding&#x3D;UTF-8</span><br><span class="line">spring.http.encoding.charset&#x3D;UTF-8</span><br><span class="line">spring.http.encoding.enabled&#x3D;true</span><br><span class="line">spring.http.encoding.force&#x3D;true</span><br><span class="line">spring.messages.encoding&#x3D;UTF-8</span><br><span class="line"></span><br><span class="line">spring.datasource.driver-class-name&#x3D;com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.url&#x3D;jdbc:mysql:&#x2F;&#x2F;192.168.252.53:3306&#x2F;zlfdb?characterEncoding&#x3D;utf-8&amp;useSSL&#x3D;false&amp;zeroDateTimeBehavior&#x3D;CONVERT_TO_NULL</span><br><span class="line">spring.datasource.username&#x3D;root</span><br><span class="line">spring.datasource.password&#x3D;123456</span><br><span class="line">spring.datasource.max-idle&#x3D;10</span><br><span class="line">spring.datasource.max-wait&#x3D;10000</span><br><span class="line">spring.datasource.min-idle&#x3D;5</span><br><span class="line">spring.datasource.initial-size&#x3D;5</span><br></pre></td></tr></table></figure><p>前面配置访问端口为9090，访问路径为/zllovemm/，设置编码格式为utf-8.下面就是配置mysql 。</p><h1 id="编写测试"><a href="#编写测试" class="headerlink" title="编写测试"></a>编写测试</h1><p>为了方便，我们就直接在controller编写测试。<br>在controller包中建一个包 userinfo ,在userinfo中创建一个UserController并编写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&#x2F;getUser&quot;)</span><br><span class="line">    public List&lt;Map&lt;String, Object&gt;&gt; getUser()&#123;</span><br><span class="line">        String sql&#x3D;&quot;select * from sys_user&quot;;</span><br><span class="line">        return jdbcTemplate.queryForList(sql);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190918153845847.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后我们来启动项目，在浏览器中输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:9090&#x2F;zlflovemm&#x2F;getUser</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/201909181536262.png" alt="在这里插入图片描述"><br>可以看到数据库是配置成功的。当然正式的项目肯定不能这样写，正式的项目会采用mybatis 或者JPA ,这个后期项目肯定也是会用的，所以这里就暂时这样写。</p><h1 id="番外"><a href="#番外" class="headerlink" title="番外"></a>番外</h1><p>项目的雏形就先这样吧，后续加入其它组件，会继续在这个项目上跟新。<br>github地址：<a href="https://github.com/QuellanAn/zlflovemm" target="_blank" rel="noopener">https://github.com/QuellanAn/zlflovemm</a></p><p>这篇就到这里吧，也算是开篇了</p><p>后续加油♡</p><p>如果大家喜欢记得关注和分享哟❤</p>]]></content>
      
      
      <categories>
          
          <category> springBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、让我们开启单元测试之旅</title>
      <link href="/2019/09/10/%E4%B8%80%E3%80%81%E8%AE%A9%E6%88%91%E4%BB%AC%E5%BC%80%E5%90%AF%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E4%B9%8B%E6%97%85/"/>
      <url>/2019/09/10/%E4%B8%80%E3%80%81%E8%AE%A9%E6%88%91%E4%BB%AC%E5%BC%80%E5%90%AF%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E4%B9%8B%E6%97%85/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>思量良久在考虑要不要写这一篇，是不是直接看门见山将在项目中怎么进行单元测试。最后想想觉得是不是太猴急了写那样，就好比你想和一个姑娘滚床单，是不是先应该请姑娘吃顿饭、送点礼物什么的。所以我才决定写这篇序言，让我们一起慢慢的揭开单元测试的面纱。</p><h1 id="什么是单元测试"><a href="#什么是单元测试" class="headerlink" title="什么是单元测试"></a>什么是单元测试</h1><p>这个在网上有很详细的解释。我这就简单的给出一个概念：<br><strong>单元测试是开发者编写一小段代码，用于检测被测代码的一个很小的、很明确的功能是否正确。</strong></p><p>单元测试是对软件基本单元进行的测试，实际应用中是对public 函数进行的测试。<br>执行单元测试，是为了验证某段代码的行为确实和开发者所期望的一致。</p><h1 id="为什么要进行单元测试"><a href="#为什么要进行单元测试" class="headerlink" title="为什么要进行单元测试"></a>为什么要进行单元测试</h1><p>理由千千万，我只宠这三点：</p><ul><li>减少调试时间</li><li>自动化测试</li><li>令设计变得更好</li></ul><p>我们或多或少也都听说过单元测试，只知道用来检测写的代码有没有问题，这导致之前都没有写过测试用例，测试一些重要的方法最多也一个 main方法正常的数据调通了就过了，这样导致后期出现各种各样的问题，一遍遍的改代码，一遍遍的改bug。费时费力还不一定能处理好。我以为这是软件开发的诟病，其实不然，是因为我们不能确认我们写的那部分代码没有问题，所以总花费很长时间找问题上。所以才需要进行单元测试，虽然在刚开始写单元测试会花费时间，但是我们单元测试全都通过之后，我们对自己写的代码更有自信，可以确定没有代码没有问题了，而不是自己认为没有问题的那种。这样后期修复bug,也可以通过单元测试哪些执行成功哪些执行失败可以快速的定位到问题。我觉得这一点就足以让我们为我们写的代码编写相应的单元测试啦，毕竟找问题真是太痛苦，大家应该也深有体会。</p><h1 id="单元测试怎么做"><a href="#单元测试怎么做" class="headerlink" title="单元测试怎么做"></a>单元测试怎么做</h1><p>简单而言，就是对一个 public 方法编写测试用例，那测试用例又怎么写呢？<br>测试用例说白了也是一个方法，用来验证目标方法是否符合我们的预期。<br>那这样就知道怎么写了吧，就是和我们平时写方法一样，但是它有一个标准<br>俗称 “3A 模式” Arrange-Act-Assert（准备上下文环境–执行被测函数–断言）。也就是说一个测试用例的方法包含三部分就可以了。</p><h1 id="测试用例应该具备的特征"><a href="#测试用例应该具备的特征" class="headerlink" title="测试用例应该具备的特征"></a>测试用例应该具备的特征</h1><p>上面说的测试用例包含这三部分就可以了，那我们的测试用例应该具备怎样的特征呢，<strong>短小精悍且快准繁</strong></p><blockquote><p>小：一个测试几行代码（15）<br>精准：一个测试之测一个场景<br>隔离：每个测试都可以独立、重复运行，无耦合<br>快：每个测试都应该是毫秒级别的<br>频繁：应该频繁的执行，没增加、修改、删除一个测试都要运行一遍</p></blockquote><p>那什么样的是好的单元测试呢？<br>自动化<br>可重复的<br>彻底的<br>独立的<br>专业的</p><h1 id="好的测试用例"><a href="#好的测试用例" class="headerlink" title="好的测试用例"></a>好的测试用例</h1><p>测试用例应该短小精悍且快准狠。这些是对测试用例的函数本身而言的，但在实际项目中出问题往往就是某些情况没有考虑到导致程序出错的，我们在自测的时候往往会测试正常数据的情况然而却忽略的了错误情况和边界值的测试，这些才是校验一个项目的健壮性的标准。所以好的测试用例必定是有全面的测试数据。那怎样获取全面的测试数据呢？<br>在这之前需要知道哪些是好的测试数据</p><ul><li>最优可能抓住错误的</li><li>不是重复的，多余的</li><li>一组相似测试用例中最有效的</li><li>既不是太简单，也不是太复杂</li></ul><p>那怎样获取好的测试数据呢？有等价类划分法、边界值法、路径分析法。</p><h2 id="等价类划分法"><a href="#等价类划分法" class="headerlink" title="等价类划分法"></a>等价类划分法</h2><p>等价类划分法是把所有可能的输入数据，划分成若干个子集，然后从每个子集中选取少数的具有代表性的数据作为测试用例。<br>该方法是一种重要的、常用的黑盒测试用例设计方法。</p><p>有效等价类：对程序的规范说明是合理的，有意义的输入数据构成的集合。<br>无效等价类：对程序的规范说明不是合理的或者无意义的输入数据构成的集合。</p><p>我们来看一个例子：计算两个点距离的函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public double getDistance(double x1, double y1, double x2, double y2)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190910202707791.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="边界值法"><a href="#边界值法" class="headerlink" title="边界值法"></a>边界值法</h2><p>边界值分析法是对输入或者输出的边界值进行测试的一组黑盒测试方法。</p><p>通常情况下，边界值分析法是作为等价类划分法的补充，这种情况下，其测试用例来自等价类的边界。</p><p>比如上面一个例子中取边界值做为测试用例。</p><h2 id="路径分析法"><a href="#路径分析法" class="headerlink" title="路径分析法"></a>路径分析法</h2><p>基本路径测试是一种白盒测试方法，它在程序控制图的基础上，通过分析程序的流程，构造导出基本可执行路径集合，从而设计测试用例的方法。</p><p>设计出的测试用例要保证在测试程序中的每一个可执行语句至少执行一次。<br>我们来看一个例子<br><img src="https://img-blog.csdnimg.cn/20190910203310419.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可能的路径为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1-2-3-4-5</span><br><span class="line">1-2-3-4-6</span><br><span class="line">1-2-4-5</span><br><span class="line">1-2-4-6</span><br></pre></td></tr></table></figure><h1 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h1><p>我们这里说的断言只是Junit断言，java 本身也有断言的，但是貌似我们使用的很少以至于我们都忘记了它的存在。<br>Junit 断言说是断言，其实也就是一份方法，没有什么语法。我们测试用例中使用断言，也就是使用这些方法来进行验证是否达到我们的预期。<br>方法有很多，大家可以看看源码，我这里给出几个常见的。<br>|函数名|描述  |<br>|–|–|<br>|  assertEquals|  判断实际产生的值与期望值是否相等|<br>|assertNull|判断对象是否为null|<br>|assertNotNull|判断对象是否为非null|<br>|assertSame|判断实际产生的对象与期望对象是否为同一个对象|<br>|assertNotSame|判断实际产生的对象与期望对象是否为不同的对象|<br>|assertTrue|判断bool变量是否为真|<br>|assertFalse|判断bool变量是否为假|<br>|Fail|使测试立即失败|</p><p>上面这样说好像没有什么效果，我们先来看其中一个断言方法的源代码。我们就看第一个assertEquals 吧<br><img src="https://img-blog.csdnimg.cn/20190911091719454.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到有很多assertEquals方法。这样的方法的重载在底层很常见。我们来看下三个参数类似是Object的这个吧。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public static void assertEquals(String message, Object expected, Object actual) &#123;</span><br><span class="line">        if (!equalsRegardingNull(expected, actual)) &#123;</span><br><span class="line">            if (expected instanceof String &amp;&amp; actual instanceof String) &#123;</span><br><span class="line">                String cleanMessage &#x3D; message &#x3D;&#x3D; null ? &quot;&quot; : message;</span><br><span class="line">                throw new ComparisonFailure(cleanMessage, (String)expected, (String)actual);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                failNotEquals(message, expected, actual);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">private static boolean equalsRegardingNull(Object expected, Object actual) &#123;</span><br><span class="line">        if (expected &#x3D;&#x3D; null) &#123;</span><br><span class="line">            return actual &#x3D;&#x3D; null;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return isEquals(expected, actual);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static boolean isEquals(Object expected, Object actual) &#123;</span><br><span class="line">        return expected.equals(actual);</span><br><span class="line">    &#125;</span><br><span class="line">private static void failNotEquals(String message, Object expected, Object actual) &#123;</span><br><span class="line">        fail(format(message, expected, actual));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static String format(String message, Object expected, Object actual) &#123;</span><br><span class="line">        String formatted &#x3D; &quot;&quot;;</span><br><span class="line">        if (message !&#x3D; null &amp;&amp; !message.equals(&quot;&quot;)) &#123;</span><br><span class="line">            formatted &#x3D; message + &quot; &quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String expectedString &#x3D; String.valueOf(expected);</span><br><span class="line">        String actualString &#x3D; String.valueOf(actual);</span><br><span class="line">        return expectedString.equals(actualString) ? formatted + &quot;expected: &quot; + formatClassAndValue(expected, expectedString) + &quot; but was: &quot; + formatClassAndValue(actual, actualString) : formatted + &quot;expected:&lt;&quot; + expectedString + &quot;&gt; but was:&lt;&quot; + actualString + &quot;&gt;&quot;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>equalsRegardingNull() 函数就是判断两个值是否相等，底层还是相当于用的object.equals()。如果两个值相等就断言通过，如果不相等就判断expected和actual是否是string类型，如果是直接将message输出。如果不是就failNotEquals().failNotEquals方法的源码我也贴出来了，可以看也很简单，就是message、expected、actual转换成string格式输出出来，并执行fail()使得测试失败。</p><p>从上面看断言也就不过如此(Junit 断言)。我们会使用常用的方法就可以写好测试用例啦，至于其他的方法，我们用到的时候可以直接其源代码，毕竟也不会很复杂。</p><h1 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h1><h2 id="目标代码及功能说明"><a href="#目标代码及功能说明" class="headerlink" title="目标代码及功能说明"></a>目标代码及功能说明</h2><p><img src="https://img-blog.csdnimg.cn/20190911110536460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这段代码在项目中的作用是对特殊字段的对应的值进行处理并返回。<br>如果字段是包含time，那将值改成日期格式返回。<br>如果字段是包含iphone,那将值截取后11位返回。<br>其他情况，直接返回。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public class DataHandle &#123;</span><br><span class="line">    public static final String REGEX_MOBILE &#x3D; &quot;^((13[0-9])|(15[0-9])|(17[0-9])|(18[0-9])|(19[0-9])|(14[0-9]))\\d&#123;8&#125;$&quot;;</span><br><span class="line"></span><br><span class="line">    public String fieldDataHandle(String key,String value)&#123;</span><br><span class="line">        &#x2F;&#x2F;如果是时间类型，将时间戳转成时间</span><br><span class="line">         if(key.toLowerCase().contains(&quot;ipone&quot;))&#123;  &#x2F;&#x2F;如果手机号长于11位，截取后11位</span><br><span class="line">            if(value.length()&gt;11)&#123;</span><br><span class="line">                value&#x3D;value.substring(value.length()-11);</span><br><span class="line">            &#125;</span><br><span class="line">            if(!isMobile(value))&#123;</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else if(key.toLowerCase().contains(&quot;time&quot;))&#123;</span><br><span class="line">            value&#x3D;timeStampToDate(value,&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return value;</span><br><span class="line">    &#125;</span><br><span class="line">    private static String timeStampToDate(String time,String timeFormat) &#123;</span><br><span class="line">        Long timeLong &#x3D; Long.parseLong(time);</span><br><span class="line">        SimpleDateFormat sdf &#x3D; new SimpleDateFormat(timeFormat);&#x2F;&#x2F;要转换的时间格式</span><br><span class="line">        Date date;</span><br><span class="line">        try &#123;</span><br><span class="line">            date &#x3D; sdf.parse(sdf.format(timeLong));</span><br><span class="line">            return sdf.format(date);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static boolean isMobile(String mobile) &#123;</span><br><span class="line">        return Pattern.matches(REGEX_MOBILE, mobile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单元测试设计"><a href="#单元测试设计" class="headerlink" title="单元测试设计"></a>单元测试设计</h2><p>等价类设计</p><table><thead><tr><th>等价类划分</th><th>有效等价类</th><th>无效等价类</th></tr></thead><tbody><tr><td>key</td><td>包含time, 包含ipone,包含time和ipone</td><td>不包含time 和ipone</td></tr><tr><td>value</td><td>时间戳，手机号，带区号的手机号</td><td>不是时间戳，也不是手机号</td></tr><tr><td>我们根据这个来设计测试用例</td><td></td><td></td></tr><tr><td>key</td><td>value</td><td>预期值</td></tr><tr><td>–</td><td>–</td><td>–</td></tr><tr><td>字段包含time</td><td>时间戳</td><td>返回日期格式的的字符串</td></tr><tr><td>字段包含time</td><td>不是时间戳</td><td>null</td></tr><tr><td>字段包含ipone</td><td>不是手机号</td><td>null</td></tr><tr><td>字段包含ipone</td><td>是11位的手机号</td><td>返回11位手机号字符串</td></tr><tr><td>字段包含ipone</td><td>是手机号，但位数大于11位</td><td>返回11位手机号字符串</td></tr><tr><td>字段包含time,ipone</td><td>时间戳</td><td>返回日期格式的的字符串</td></tr><tr><td>字段包含time,ipone</td><td>不是手机号，也不是时间戳</td><td>null</td></tr><tr><td>字段包含time,ipone</td><td>手机号</td><td>null</td></tr><tr><td>字段不包含time 和ipone</td><td>时间戳</td><td>时间戳字符串</td></tr><tr><td>字段不包含time 和ipone</td><td>11位手机号</td><td>手机号字符串</td></tr><tr><td>字段不包含time 和ipone</td><td>大于11位手机号</td><td>返回值字符串</td></tr><tr><td>字段不包含time 和ipone</td><td>不是手机号，也不是时间戳</td><td>值对应字符串</td></tr></tbody></table><p>编写测试用例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">public class DataHandleTest &#123;</span><br><span class="line"></span><br><span class="line">    DataHandle dataHandle &#x3D; null;</span><br><span class="line"></span><br><span class="line">    @Before</span><br><span class="line">    public void setup()</span><br><span class="line">    &#123;</span><br><span class="line">        dataHandle &#x3D; new DataHandle();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @After</span><br><span class="line">    public void tearDown()</span><br><span class="line">    &#123;</span><br><span class="line">        dataHandle &#x3D; null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testFieldDataHandle_包含time是时间戳_返回日期字符串()&#123;</span><br><span class="line">        assertEquals(&quot;2019-09-10 19:02:30&quot;, dataHandle.fieldDataHandle(&quot;atime&quot;,&quot;1568113350000&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testFieldDataHandle_包含time不是时间戳_返回NULL()&#123;</span><br><span class="line">        assertNull(dataHandle.fieldDataHandle(&quot;atime&quot;,&quot;1568113350aaa&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testFieldDataHandle_包含ipone不是手机号_返回NULL()&#123;</span><br><span class="line">        assertNull(dataHandle.fieldDataHandle(&quot;bipone&quot;,&quot;aaa&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testFieldDataHandle_包含ipone是11位手机号_返回手机号字符串()&#123;</span><br><span class="line">        assertEquals(&quot;13265459362&quot;,dataHandle.fieldDataHandle(&quot;bipone&quot;,&quot;13265459362&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testFieldDataHandle_包含ipone是大于11位手机号_返回手机号字符串()&#123;</span><br><span class="line">        assertEquals(&quot;13265459362&quot;,dataHandle.fieldDataHandle(&quot;bipone&quot;,&quot;+8613265459362&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testFieldDataHandle_包含time和ipone是时间戳_返回NULL()&#123;</span><br><span class="line">        assertNull(dataHandle.fieldDataHandle(&quot;atimebipone&quot;,&quot;1568168656000&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testFieldDataHandle_包含time和ipone是手机号_返回手机号字符串()&#123;</span><br><span class="line">        assertEquals(&quot;13265459362&quot;,dataHandle.fieldDataHandle(&quot;atimebipone&quot;,&quot;13265459362&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testFieldDataHandle_包含time和ipone不是时间戳手机号_返回NULL()&#123;</span><br><span class="line">        assertNull(dataHandle.fieldDataHandle(&quot;atimebipone&quot;,&quot;aaabbb&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testFieldDataHandle_不包含time和ipone是时间戳_返回时间戳字符串()&#123;</span><br><span class="line">        assertEquals(&quot;1568114439&quot;,dataHandle.fieldDataHandle(&quot;ccc&quot;,&quot;1568114439&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testFieldDataHandle_不包含time和ipone是11位手机号_返回时间手机号字符串()&#123;</span><br><span class="line">        assertEquals(&quot;13112341234&quot;,dataHandle.fieldDataHandle(&quot;ccc&quot;,&quot;13112341234&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testFieldDataHandle_不包含time和ipone是大于11位手机号_返回值字符串()&#123;</span><br><span class="line">        assertEquals(&quot;+8613412341234&quot;,dataHandle.fieldDataHandle(&quot;ccc&quot;,&quot;+8613412341234&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testFieldDataHandle_不包含time和ipone不是时间戳手机号_返回值字符串()&#123;</span><br><span class="line">        assertEquals(&quot;abcdefg&quot;,dataHandle.fieldDataHandle(&quot;ccc&quot;,&quot;abcdefg&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们执行一下测试用例；<br><img src="https://img-blog.csdnimg.cn/20190911110726313.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到有一个地方的测试用例是不通过的，那就说明有问题，我们看一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">   public void testFieldDataHandle_包含time不是时间戳_返回NULL()&#123;</span><br><span class="line">       assertNull(dataHandle.fieldDataHandle(&quot;atime&quot;,&quot;1568113350aaa&quot;));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这个是抛异常了，因为日期格式转换错误，但是我们在日期转换的时候已经捕获了呀，并且返回为null 。<br><img src="https://img-blog.csdnimg.cn/20190911110830274.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>那为什么测试用例没有通过呢，而是直接抛异常出来了，调试发现这个方法没有捕获到异常，而是直接抛出给Junit了。所以这里提示代码不能这么写。一般异常了不建议返回null.而是打印出异常把信息抛出。这里我们就不改了。我们将测试用例改一下，在测试用例中捕获一下异常。<br>改成如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Test(expected &#x3D; NumberFormatException.class)</span><br><span class="line">   public void testFieldDataHandle_包含time不是时间戳_throwsException()&#123;</span><br><span class="line">       dataHandle.fieldDataHandle(&quot;atime&quot;,&quot;1568113350aaa&quot;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>再全部执行一下<br><img src="https://img-blog.csdnimg.cn/20190911112006427.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这样就不抱错了。<br>好啦这个就是一个简单的测试用例啦。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>最后总结一下吧，我觉得应该知道以下几点</p><ul><li>认识到单元测试的必要性</li><li>好的测试用例是关键</li><li>测试用例中断言必不可少</li><li>编写测试用例的规范要遵循</li></ul><p>看到这啦的小伙伴，如果觉得喜欢就点个赞吧嘿嘿。如果有什么意见，欢迎给我提。嘿嘿。后续想写一下测试用例的规范，喜欢的可以持续关注❤</p><p>如果大家喜欢记得关注和分享哟❤</p>]]></content>
      
      
      <categories>
          
          <category> 单元测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Junit </tag>
            
            <tag> 单元测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网穿透ngrok_ngrokcc_cpolar</title>
      <link href="/2019/09/05/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8Fngrok_ngrokcc_cpolar/"/>
      <url>/2019/09/05/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8Fngrok_ngrokcc_cpolar/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>先来说说问题吧，我们的项目在测试环境上搭建好了，也就是在内网上可以正常运行，但是呢，局方的人想要看一下效果先，那问题就来了，不在同一个局域网，他们访问不了我们的内网啊，现在又想看。这咋整。所以就有了这篇文章。<br>这三个软件都差不多，都有一个免费的，我自己都试了一下，window和Linux的都可以，做演示的话问题不大。刚刚好满足要求。</p><h1 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h1><p>ngrok:<a href="https://ngrok.com/" target="_blank" rel="noopener">https://ngrok.com/</a><br>ngrokc:<a href="http://www.ngrok.cc/" target="_blank" rel="noopener">http://www.ngrok.cc/</a><br>cpolar:<a href="https://www.cpolar.com/" target="_blank" rel="noopener">https://www.cpolar.com/</a></p><p>大家对着官网教程来就可以了，无非都是注册会员，领取那个免费的authtoken.然后下载客户端，设置端口，启动项目，用域名进行访问。</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>1、ngrok 和 cpolar 基本用法都是一致的，都是生成一个authtoken ,然后设置一个ip和端口，会随机的生成一个http的域名和一个https 的域名随机访问。<br><img src="https://img-blog.csdnimg.cn/20190905185742950.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2、ngrokcc 是国内的一个网站，没有authtoken ,但是有隧道，需要你在控制台建好隧道，然后在客户端连接隧道id 就好了<br><img src="https://img-blog.csdnimg.cn/20190905190106504.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;sunny clientid 隧道id</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190905190543757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>使用起来还是比较简单，能满足我们将项目搭建在本地，用公网访问演示。</p><h1 id="番外"><a href="#番外" class="headerlink" title="番外"></a>番外</h1><p>这几个是三个软件都是利用Nginx反向代理实现的。但是免费的只有一个隧道或者一个端口，这个时候我们可以在自己本地再搭建一个Nginx做虚拟主机，这样就可以自由飞翔了吧哈哈</p><h1 id="再番外"><a href="#再番外" class="headerlink" title="再番外"></a>再番外</h1><p>因为看了一下官方文档，发现不仅可以代理一个端口网站，还能代理tcp协议。</p><p>我来举一个例子。我有两台电脑，一台装的是win ,一台装的是Ubuntu，一般我都是把Ubuntu当做服务器用。两台电脑在同一个局域网直接用xhell 的ssh 连接起来当然很方便啦。但是我有时候需要把win 带到其他地方，那做服务器的那台电脑就不能访问啦，<br>所以我参考一下官网的，可以在用外网访问这台服务器啦。<br>操作也很简单，我三个也都测试了一下，用的是cpolar 的，感觉比ngrok 要稳定些。<br>1、在我们Ubuntu服务器上安装好cpolar客户端，然后认证tocken 这些和之前是一样哒。<br>2、</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cpolar tcp 22</span><br></pre></td></tr></table></figure><p>就这么简单。<br><img src="https://img-blog.csdnimg.cn/20190906141633105.png" alt="在这里插入图片描述"></p><p>然后在主机和端口号填上对应的就好了，就是这么简单。<br><img src="https://img-blog.csdnimg.cn/20190906141742822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这样之后，就算两台电脑不在同一个局域网，也可以直接访问了，很实用。</p><p>后续加油♡</p>]]></content>
      
      
      <categories>
          
          <category> 建站之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网穿透 </tag>
            
            <tag> ngrok </tag>
            
            <tag> ngrokcc </tag>
            
            <tag> cpolar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、Redis安装</title>
      <link href="/2019/08/01/%E4%B8%80%E3%80%81Redis%E5%AE%89%E8%A3%85/"/>
      <url>/2019/08/01/%E4%B8%80%E3%80%81Redis%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h1><p>其实Redis安装教程网上有很多，这里记录下来主要是记录自己的实践流程。之前学习过一些Redis的知识，但是都是朦朦胧胧的，现在Redis技术越来越火。不管多小的项目都会凑一凑热闹，所以了解一下Redis还是很有必要的。所以才有了现在的开篇。<br>从安装开始吧。</p><h1 id="2、windows安装"><a href="#2、windows安装" class="headerlink" title="2、windows安装"></a>2、windows安装</h1><p>软件：链接：<a href="https://pan.baidu.com/s/1JzjuFM30AAJd6jkf5pG7XQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1JzjuFM30AAJd6jkf5pG7XQ</a><br>提取码：oowy </p><p>我使用的是安装版的，下载下来运行，下一步下一步就可以，注意安装路径，并且将路径加入Path 中就可以了。<br><img src="https://img-blog.csdnimg.cn/20190801144431193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>安装完成后，在服务中就可以找到Redis 服务。如果没有启动就启动，如果启动了，那么就可以直接使用Redis了。</p><p>然后在控制台输入<code>redis-cli</code>redis-cli就可以进去Redis啦，进行相关的操作。这里是没有设置密码，使用的是默认的6370端口。<br><img src="https://img-blog.csdnimg.cn/20190801144832245.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>上面输入的<code>keys *</code> 表示查询出redis 中所有的key。</p><h1 id="3、Linux安装"><a href="#3、Linux安装" class="headerlink" title="3、Linux安装"></a>3、Linux安装</h1><p>本人装了一个Linux虚拟机，xshell6连接上去的。</p><h2 id="3-1-下载解压"><a href="#3-1-下载解压" class="headerlink" title="3.1 下载解压"></a>3.1 下载解压</h2><p>首先下载资源：最新的应该是4.0.9</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-4.0.9.tar.gz</span><br><span class="line"></span><br><span class="line">tar xzvf redis-4.0.8.tar.gz</span><br></pre></td></tr></table></figure><h2 id="3-2-安装"><a href="#3-2-安装" class="headerlink" title="3.2 安装"></a>3.2 安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd redis-4.0.9&#x2F;                           &#x2F;&#x2F;进入解压目录</span><br><span class="line">make                                      &#x2F;&#x2F;编译</span><br><span class="line">cd src &#x2F;&#x2F;进入src 目录</span><br><span class="line">make install PREFIX&#x3D;&#x2F;usr&#x2F;local&#x2F;redis&#x2F;&#x2F;进行安装到usr&#x2F;local&#x2F;下，方便部署开机启动</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190801162227287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-3-部署"><a href="#3-3-部署" class="headerlink" title="3.3 部署"></a>3.3 部署</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#将conf文件放大etc目录下</span><br><span class="line">mkdir &#x2F;usr&#x2F;local&#x2F;redis&#x2F;etc</span><br><span class="line"></span><br><span class="line">mv redis.conf &#x2F;usr&#x2F;local&#x2F;redis&#x2F;etc</span><br></pre></td></tr></table></figure><p>进入src目录，移动 mkreleasehdr.sh redis-benchmark redis-check-aof redis-check-rdb redis-cli redis-server到/usr/local/redis/bin/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-check-rdb redis-cli redis-server &#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin&#x2F;</span><br></pre></td></tr></table></figure><p>配置redis为后台启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;usr&#x2F;local&#x2F;redis&#x2F;etc&#x2F;redis.conf &#x2F;&#x2F;将daemonize no 改成daemonize yes</span><br></pre></td></tr></table></figure><h2 id="3-4-启动"><a href="#3-4-启动" class="headerlink" title="3.4 启动"></a>3.4 启动</h2><p>启动服务端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server &#x2F;usr&#x2F;local&#x2F;redis&#x2F;etc&#x2F;redis.conf</span><br></pre></td></tr></table></figure><p>启动客户端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure><p>　　</p><h1 id="4、设置登录密码"><a href="#4、设置登录密码" class="headerlink" title="4、设置登录密码"></a>4、设置登录密码</h1><p>刚刚上面也看到了，直接输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure><p>就直接进去了，这样总感觉不安全，并且我们后面肯定不是通过命令行来访问Redis的，还是需要在项目中使用才行，总会配置Redis的密码的。那怎么设置呢。<br>先来看看我们Redis的密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config get requirepass</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190801151515183.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>发现是没有密码的，现在设置一个，用了get 获取，当然用set设置啦。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config set requirepass 123456</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190801151750393.png" alt="在这里插入图片描述"><br>设置好之后，在想看看自己设置的密码是什么，发现没有权限，哈哈，这就证明你密码设置成功了，现在需要登录密码才能访问数据库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auth 123456</span><br><span class="line">config get requirepass</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190801152019785.png" alt="在这里插入图片描述"><br>但是这样设置的密码有一个问题，那就是把控制台关了，从新进入就会发现密码失效啦，这显然不是我们想要的，原来我们那样设置没有写到conf文件中，是不会重启生效的（<strong>如果配置文件中没添加密码 那么redis重启后，密码失效</strong>）。</p><p>所以我们需要修改redis.conf中的requirepass并重新启动。<br><img src="https://img-blog.csdnimg.cn/20190801172840195.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NzkwMDEx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>杀死Redis服务端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#找到PID</span><br><span class="line">netstat -anp|grep 6379</span><br><span class="line"></span><br><span class="line">kill -9 PID</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190801173056126.png" alt="在这里插入图片描述"><br>重启后再进去就发现需要密码啦<br><img src="https://img-blog.csdnimg.cn/20190801173240679.png" alt="在这里插入图片描述"></p><p>也可以这样进入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -p 6379 -a 123456</span><br></pre></td></tr></table></figure><p>后续加油♡</p><p>如果大家喜欢记得关注和分享哟❤</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> java </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
